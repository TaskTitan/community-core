import { Anthropic } from "@anthropic-ai/sdk";
import { OpenAI } from "openai";
import {
  getRawTextFromPDFBuffer,
  getRawTextFromDocxBuffer,
  trimToWordLimit,
  generateUniqueId,
  computeFileHash,
} from "./utils.js";

class StreamEngine {
  constructor() {
    this.apiKeys = {
      anthropic: process.env.CLAUDE_API_KEY,
      openai: process.env.OPENAI_API_KEY,
      togetherai: process.env.TOGETHERAI_API_KEY,
      // Add other provider API keys as needed
    };
    this.baseURLs = {
      openai: "https://api.openai.com/v1",
      togetherai: "https://api.together.xyz/v1",
      // Add other provider base URLs as needed
    };
    this.systemPrompt = `RESPONSE FORMAT:

IMPORTANT: If returning advanced math or chemical notation, ALWAYS INCLUDE DOUBLE DOLLAR SIGNS "$$\\" at the beginning and "$$" end of any MathJax advanced math notation that can be used by MathJax JavaScript display engine. For example: "$$\sigma = \sqrt{\text{Var}(X)}$$"
IMPORTANT: For MathJax chemical formulas, ALWAYS include the mhchem extension by enclosing the formula in "$$\\ce{}$$" tags. For example: "$$\\ce{H2O}$$" for water.
IMPORTANT: When using chemical formulas, always enclose the entire \\ce{} expression in display math delimiters $$ $$. For example: $$\\ce{H2O}$$
For more complex structures or equations involving both chemical formulas and mathematical notation, use the appropriate combination of delimiters and mhchem commands. For example:
$$\\ce{C6H12O6} + 6\\ce{O2} \\rightarrow 6\\ce{CO2} + 6\\ce{H2O}$$
Remember to use proper spacing and line breaks for readability in more complex equations or structures.
If returning programming code, return the code within <PRE><CODE> tags.
Always return your helpful answer as well structured, valid markdown format with various elements (h1 #, h2 ##, h3 ##, lists -, etc where appropriate).
IMPORTANT: DO NOT INCLUDE THE OUTERMOST "\`\`\`markdown", <>,  OR FINAL "\`\`\`" IN YOUR RESULT. I WILL HANDLE THAT EXTERNALLY.
`;
    this.chatSystemPrompt = `SYSTEM INSTRUCTIONS:

Your primary goal is to read the entire chat, message by message, and continue the current chat, responding to the user's latest request while referencing the current chat.
Think step by step in your mind about the messages from latest to first in the "current-chat". The current chat is the exact HTML page as the user sees it. 
Do not repeat the previous messages or your internal monolog in you response. Make sure each message response back to the user is unique unless asked so by the user.
Prioritize answering the "user-current-message" (latest message from user) query by referencing messages between you (the assistant) and the user in the "current-chat" (past messages). 
Prioritize later messages in the conversation (message number 10) over earlier messages (message number 2) when responding. 

RESPONSE FORMAT:

IMPORTANT: If returning advanced math, math notation, latex, or chemical notation, ALWAYS USE MATHJAX WITH DOUBLE DOLLAR SIGNS "$$" at the beginning and "$$" end of any MathJax advanced math notation that can be used by MathJax JavaScript display engine.
EXAMPLES: "$$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$"
"$$\sigma = \sqrt{\text{Var}(X)}$$"
IMPORTANT: For MathJax chemical formulas, ALWAYS include the mhchem extension by enclosing the formula in "$$\\ce{}$$" tags. For example: "$$\\ce{H2O}$$" for water.
IMPORTANT: When using chemical formulas, always enclose the entire \\ce{} expression in display math delimiters $$ $$. For example: $$\\ce{H2O}$$
For more complex structures or equations involving both chemical formulas and mathematical notation, use the appropriate combination of delimiters and mhchem commands. For example:
$$\\ce{C6H12O6} + 6\\ce{O2} \\rightarrow 6\\ce{CO2} + 6\\ce{H2O}$$
Remember to use proper spacing and line breaks for readability in more complex equations or structures.
If returning programming code, return the code within <PRE><CODE> tags.
Always return your helpful answer as well structured, valid markdown format with various elements (h1 #, h2 ##, h3 ##, lists -, etc where appropriate).
IMPORTANT: DO NOT INCLUDE THE OUTERMOST "\`\`\`markdown", <>,  OR FINAL "\`\`\`" IN YOUR RESULT. I WILL HANDLE THAT EXTERNALLY.
`;
    this.clients = {
      anthropic: new Anthropic({ apiKey: this.apiKeys.anthropic }),
      openai: new OpenAI({
        apiKey: this.apiKeys.openai,
        organization: process.env.OPENAI_ORGANIZATION,
      }),
      togetherai: new OpenAI({
        apiKey: this.apiKeys.togetherai,
        baseURL: this.baseURLs.togetherai,
      }),
      // Initialize other provider clients as needed
    };

    this.streamMap = new Map();
  }
  async startStream(
    req,
    res,
    userQuery,
    files,
    provider,
    modelName,
    isChat,
    messages
  ) {
    // Add these headers at the start of the method
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.setHeader('X-Accel-Buffering', 'no'); // Important for Nginx
  res.setHeader('Transfer-Encoding', 'chunked');
  
  // Enable CORS if needed
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Headers', '*');
  
  // Disable response buffering
  res.flushHeaders();
  
    const cache = {};
    let combinedDocumentText = "";
    let systemPrompt = isChat ? this.chatSystemPrompt : this.systemPrompt;

    try {

      // Handle files
      if (files) {
        let fileCount = 0;
        for (const file of files) {
          const fileBuffer = file.buffer;
          const fileType = file.mimetype;
          let textContent = "";
          let cacheKey;
          fileCount++;

          if (fileBuffer) {
            cacheKey = computeFileHash(fileBuffer);
            if (cache[cacheKey]) {
              textContent = cache[cacheKey];
            } else {
              switch (fileType) {
                case "application/pdf":
                  textContent = await getRawTextFromPDFBuffer(
                    Buffer.from(fileBuffer)
                  );
                  break;
                case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                  textContent = await getRawTextFromDocxBuffer(
                    Buffer.from(fileBuffer)
                  );
                  break;
                case "text/plain":
                case "text/csv":
                case "text/html":
                case "text/javascript":
                case "text/markdown":
                case "application/octet-stream":
                  textContent = fileBuffer.toString("utf-8");
                  break;
                default:
                  return res.status(400).send("Unsupported file type.");
              }
              cache[cacheKey] = textContent;
            }
          }
          combinedDocumentText += `[FILE #${fileCount} OF ${files.length}] \n\n`;
          combinedDocumentText += textContent + "\n\n";
        }
      }

      const streamId = generateUniqueId();
      console.log(`Stream ${streamId} created...`);

      combinedDocumentText = trimToWordLimit(combinedDocumentText, 8192);

      switch (provider.toLowerCase()) {
        case "anthropic":
          await this.startClaudeAIStream(
            res,
            systemPrompt,
            combinedDocumentText,
            userQuery,
            messages,
            streamId,
            modelName
          );
          break;
        case "openai":
          await this.startOpenAIStream(
            res,
            systemPrompt,
            combinedDocumentText,
            userQuery,
            messages,
            streamId,
            modelName
          );
          break;
        case "togetherai":
          await this.startTogetherAIStream(
            res,
            systemPrompt,
            combinedDocumentText,
            userQuery,
            messages,
            streamId,
            modelName
          );
          break;
        // Add cases for other providers as needed
        default:
          throw new Error(`Unsupported provider: ${provider}`);
      }
    } catch (error) {
      console.error(
        "Error processing the file(s) or generating the text stream:",
        error
      );
      res
        .status(500)
        .send(
          "An error occurred while processing the file(s) or generating the text stream."
        );
    }
  }
  async startOpenAIStream(
    res,
    systemPrompt,
    combinedDocumentText,
    userQuery,
    messages,
    streamId,
    modelName
  ) {
    let finalMessages = [];

    if (messages && messages.length > 0) {
      try {
        finalMessages = Array.isArray(messages)
          ? messages
          : JSON.parse(messages);

        // Filter out messages with null content
        finalMessages = finalMessages.filter(
          (msg) => msg.content !== null && msg.content !== undefined
        );
      } catch (error) {
        console.error("Error parsing messages JSON:", error);
        finalMessages = [];
      }
    }

    if (userQuery) {
      const userMessage = {
        role: "user",
        content: userQuery,
      };
      finalMessages.push(userMessage);
    }

    console.log(finalMessages);

    try {
      const stream = await this.clients.openai.chat.completions.create({
        model: modelName,
        messages: [
          {
            role: "system",
            content: `
              [SYSTEM INSTRUCTIONS]:
              ${systemPrompt}
              [END SYSTEM INSTRUCTIONS]

              [START RELEVANT DOCUMENT TEXT (OPTIONAL)]:
              ${combinedDocumentText}
              [END RELEVANT DOCUMENT TEXT]:
            `,
          },
          ...finalMessages,
        ],
        temperature: 1,
        max_tokens: 8192,
        top_p: 1,
        stream: true,
      });

      // Set response headers for streaming
      // res.setHeader("Content-Type", "text/event-stream");
      // res.setHeader("Cache-Control", "no-cache");
      // res.setHeader("Connection", "keep-alive");

      this.streamMap.set(streamId, stream);

      // Return the stream ID to the client
      res.write(`{ streamId: ${streamId} }\n\n`);

      for await (const chunk of stream) {
        const content = chunk.choices[0]?.delta?.content || "";
        if (content) {
          res.write(content);
        }
      }

      this.streamMap.delete(streamId);
      console.log(`Stream ${streamId} complete.`);
      res.end();
    } catch (error) {
      console.error("Stream error:", error);
      res
        .status(500)
        .write(`data: ${JSON.stringify({ error: "Stream error" })}\n\n`);
      this.streamMap.delete(streamId);
      res.end();
    }
  }
  async startClaudeAIStream(
    res,
    systemPrompt,
    combinedDocumentText,
    userQuery,
    messages,
    streamId,
    modelName
  ) {
    let finalMessages = [];

    if (messages && messages.length > 0) {
      try {
        // Check if messages is already an array
        finalMessages = Array.isArray(messages)
          ? messages
          : JSON.parse(messages);
      } catch (error) {
        console.error("Error parsing messages JSON:", error);
        console.error("Failed to parse:", messages);
        // If parsing fails, we'll use an empty array for messages
        finalMessages = [];
      }
    }

    if (userQuery) {
      const userMessage = {
        role: "user",
        content: userQuery,
      };
      finalMessages.push(userMessage);
    }

    console.log(finalMessages);

    try {
      const stream = await this.clients.anthropic.messages.stream(
        {
          model: modelName,
          messages: finalMessages,
          system: [
            {
              type: "text",
              text: `
              [SYSTEM INSTRUCTIONS]:
              ${systemPrompt}
              [END SYSTEM INSTRUCTIONS]
    
              [START RELEVANT DOCUMENT TEXT (OPTIONAL)]:
              ${combinedDocumentText}
              [END RELEVANT DOCUMENT TEXT]:
            `,
              // cache_control: { type: 'ephemeral' }
            },
          ],
          max_tokens: modelName === "claude-3-5-sonnet-20240620" ? 8192 : 4096,
          temperature: 0.5,
        },
        {
          headers: {
            "anthropic-beta": "max-tokens-3-5-sonnet-2024-07-15",
          },
          // If using cache
          // headers: {
          //   "anthropic-beta": "prompt-caching-2024-07-31,max-tokens-3-5-sonnet-2024-07-15"
          // }
        }
      );

      // Set response headers for streaming
      // res.setHeader("Content-Type", "text/event-stream");
      // res.setHeader("Cache-Control", "no-cache");
      // res.setHeader("Connection", "keep-alive");

      this.streamMap.set(streamId, stream);

      // Return the stream ID to the client
      res.write(`{ streamId: ${streamId} }\n\n`);

      stream.on("text", (text) => {
        if (text.length > 0) {
          res.write(text);
        }
      });

      stream.on("end", () => {
        res.end();
      });

      stream.on("error", (error) => {
        console.error("Stream error:", error);
        res
          .status(500)
          .write(`data: ${JSON.stringify({ error: "Stream error" })}\n\n`);
        this.streamMap.delete(streamId);
        res.end();
      });
    } catch (error) {
      console.error("Error setting up stream:", error);
      res.status(500).send("Error setting up stream");
    }
  }
  async startTogetherAIStream(
    res,
    systemPrompt,
    combinedDocumentText,
    userQuery,
    messages,
    streamId,
    modelName
  ) {
    let finalMessages = [];

    if (messages && messages.length > 0) {
      try {
        finalMessages = Array.isArray(messages)
          ? messages
          : JSON.parse(messages);
      } catch (error) {
        console.error("Error parsing messages JSON:", error);
        finalMessages = [];
      }
    }

    if (userQuery) {
      const userMessage = {
        role: "user",
        content: userQuery,
      };
      finalMessages.push(userMessage);
    }

    console.log(finalMessages);

    try {
      const stream = await this.clients.togetherai.chat.completions.create({
        model: modelName,
        messages: [
          {
            role: "system",
            content: `
              [SYSTEM INSTRUCTIONS]:
              ${systemPrompt}
              [END SYSTEM INSTRUCTIONS]
  
              [START RELEVANT DOCUMENT TEXT (OPTIONAL)]:
              ${combinedDocumentText}
              [END RELEVANT DOCUMENT TEXT]:
            `,
          },
          ...finalMessages,
        ],
        temperature: 0.7,
        max_tokens: 4096,
        top_p: 1,
        stream: true,
      });

      // Set response headers for streaming
      // res.setHeader("Content-Type", "text/event-stream");
      // res.setHeader("Cache-Control", "no-cache");
      // res.setHeader("Connection", "keep-alive");

      this.streamMap.set(streamId, stream);

      // Return the stream ID to the client
      res.write(`{ streamId: ${streamId} }\n\n`);

      for await (const chunk of stream) {
        const content = chunk.choices[0]?.delta?.content || "";
        if (content) {
          res.write(content);
        }
      }

      this.streamMap.delete(streamId);
      console.log(`Stream ${streamId} complete.`);
      res.end();
    } catch (error) {
      console.error("Stream error:", error);
      res
        .status(500)
        .write(`data: ${JSON.stringify({ error: "Stream error" })}\n\n`);
      this.streamMap.delete(streamId);
      res.end();
    }
  }
  cancelStream(streamId) {
    const stream = this.streamMap.get(streamId);
    if (stream) {
      stream.controller.abort();
      this.streamMap.delete(streamId);
      console.log(`Stream ${streamId} cancelled.`);
    }
  }
  async generateTool(templateOverview) {
    try {
      const toolGenerationPrompt = `[PRIORITIZE THESE INSTRUCTIONS AND ESPECIALLY THE TEMPLATE BELOW]:
      Generate a detailed and complete JSON template with all fields and initial instructions based on the user's template overview requirements. 
      Expand on that idea and return as a valid JSON object in the exact format as the examples below.
      You have the types "text", "textarea", and "file" to choose from. 
      Always make sure at least the template name and instructions (these are for the template's AI, not the user) are filled out.
      Always return as a complete JSON string with properties double quoted.
      Think step by step about the best fields and information to include as the template. 
      DO NOT USE MARKDOWN AT ALL FOR THIS PARTICULAR QUERY, JUST THE OBJECT PLEASE WITH NO EXPLAINATION OR COMMENTARY WHAT SOEVER.
      DO NOT INCLUDE THE OUTERMOST "'''json" OR FINAL "'''" IN YOUR RESULT. I WILL HANDLE THAT EXTERNALLY!!
      Think step by step about the above instructions.

      [TEMPLATE OVERVIEW]:
      ${templateOverview}
      
      [EXAMPLE TEMPLATE OBJECTS]:
      
      [EXAMPLE 1]:
      "{
        "id": "template-home-renovation-advisor",
        "name": "Home Renovation Advisor",
        "fields": [
            {
                "name": "template-name",
                "value": "Home Renovation Advisor",
                "type": "text"
            },
            {
                "name": "template-instructions",
                "value": "Provide suggestions for home renovation projects, including design ideas, material recommendations, and cost estimations.",
                "type": "textarea"
            },
            {
                "name": "room-type",
                "value": "",
                "type": "textarea"
            },
            {
                "name": "design-preferences",
                "value": "",
                "type": "textarea"
            },
            {
                "name": "budget",
                "value": "",
                "type": "textarea"
            }
        ]
      }"

      [EXAMPLE 2]:
      "{
          "id": "template-fitness-routine-generator",
          "name": "Fitness Routine Generator",
          "fields": [
              {
                  "name": "template-name",
                  "value": "Fitness Routine Generator",
                  "type": "text"
              },
              {
                  "name": "template-instructions",
                  "value": "Create a customized fitness routine based on user's fitness level, goals, and available equipment.",
                  "type": "textarea"
              },
              {
                  "name": "fitness-level",
                  "value": "",
                  "type": "textarea"
              },
              {
                  "name": "fitness-goals",
                  "value": "",
                  "type": "textarea"
              },
              {
                  "name": "equipment",
                  "value": "",
                  "type": "textarea"
              }
          ]
      }"
      
      [NEW TEMPLATE OBJECT]:'''json`;

      const msg = await this.clients.anthropic.messages.create(
        {
          model: "claude-3-5-sonnet-20240620",
          max_tokens: 8192,
          temperature: 0,
          system: [
            {
              type: "text",
              text: "Generate valid JSON based on the user instructions. Return ONLY JSON with no additional text.",
            },
          ],
          messages: [
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: toolGenerationPrompt,
                },
              ],
            },
          ],
        },
        {
          headers: {
            "anthropic-beta": "max-tokens-3-5-sonnet-2024-07-15",
          },
        }
      );

      console.log(msg);

      return { template: msg.content[0].text };
    } catch (error) {
      console.error("Error generating tool template:", error);
      throw error;
    }
  }
  async generateWorkflow(workflowOverview) {
    const workflowGenSystemPrompt = `##### * ^ * WORKFLOW GENERATION MODE ENGAGED * ^ * #####
    
    [WORKFLOW GENERATION INSTRUCTIONS]:
    1. Think logically and step by step to generate detailed and well formatted workflow JSON based on the following user query, available tools, and example JavaScript format. Absolutely NO explanation will be accepted, ONLY JSON.
    2. Nodes are 288px wide and 48px high, space them out accordingly on the canvas. Generally in a top down vertical layout, with each next block to the bottom of the last. 
    3. If a path splits due to a condition, place the options to the right and stacked. Loops back or cross backs to a previous node is not permitted, paths must end with a node and must end. 
    4. Avoid outputting to a previous node. Keep a top down left right flow generally. 
    5. If you must flow backward, you must drop the node that backtracks down a level, and bring all nodes in between the backtracker node and its target to the right (see examples). This helps avoid edges following the exact same path and makes flows more legible. 
    6. IMPORTANT: Bring ALL nodes in between the backtracker node and its target to the right of the target. 
    7. Always use label type nodes where possible to label logical groups of node together (see examples).
    8. When generating the workflow JSON, make sure to include the correct 'icon' property for each node based on its type. For example, a 'receive-email' node should have 'icon': 'inbox'.
    9. Triggers are the only type of Tools that can not have an input connection. All other node types have both an input and output connection. 
    10. NEVER user the "google-sheets-api" as a starting trigger node. It is NOT a trigger. The system will fail. Use "google-sheets-new-row" if you need a sheet trigger.

    [EXAMPLE FORMAT]:
    
    USER QUERY:
    "Email Support System"
    RESULT:
    {"id":"9d36866e-4cab-4d5d-b728-b255d4185a20","nodes":[{"id":"receiveCustomerEmail","text":"Receive Customer Email","x":816,"y":176,"isEditing":false,"type":"receive-email","icon":"inbox","category":"trigger","isSelected":false,"parameters":{"emailAddress":""},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received. Returns the received email details like from address, subject, body, etc.","outputs":{"from":"","subject":"","body":"","attachments":[]}},{"id":"analyzeEmailContent","text":"Analyze Email Content","x":816,"y":240,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the following customer support email and return a JSON object with the following properties: \ncategory (e.g., 'Technical', 'Billing', 'Product Inquiry'), \npriority (1-5, where 1 is highest), \nand a brief summary (max 50 words).\n\nExample:\n{\ncategory: \"Technical\",\npriority: 2,\nsummary: \"Customer is experiencing difficulties logging into their account and requires assistance.\"\n}\n\nEmail Subject: {{receiveCustomerEmail.subject}}\nEmail Body: {{receiveCustomerEmail.body}}\n\nReturn ONLY the JSON object ready to run without any additional text or explanation.","maxTokens":"300","temperature":"0.3"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","outputs":{"generatedText":"","tokenCount":0,"error":""}},{"id":"generateTicket","text":"Generate Ticket","x":1136,"y":176,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const ticketInfo = {{analyzeEmailContent.generatedText}};\nconst ticketNumber = 'TKT-' + Date.now().toString(36).toUpperCase();\nconst ticket = {\n number: ticketNumber,\n category: ticketInfo.category,\n priority: ticketInfo.priority,\n summary: ticketInfo.summary,\n status: 'Open',\n createdAt: new Date().toISOString(),\n customerEmail: {{receiveCustomerEmail.from}},\n subject: {{receiveCustomerEmail.subject}},\n body: {{receiveCustomerEmail.body}}\n};\nreturn { ticketNumber, ticket };"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","outputs":{"result":null,"error":""}},{"id":"generateCustomerResponse","text":"Generate Customer Response","x":1136,"y":240,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Instructions:\nYour name is Albert, and you are a helpful TaskTitan customer support rep. Please generate a polite, helpful, and detailed introductory response to the customer acknowledging their support request. \n\nComplete Ticket Details:\n{{generateTicket.result.ticket}}\n\nInclude the following information in your response:\n1. Ticket number: {{generateTicket.result.ticketNumber}}\n2. Introduce yourself + Brief acknowledgment of their issue\n3. Choose an estimated response time based on this tickets priority level: {{generateTicket.result.ticket.priority}}\n(Priority 1-2 = 4 hours, Priority 3-4 = 24 hours, Priority 5 = 48 hours) - Choose the most appropriate time estimate based on the priority level.\n4/ Generate a few potential common solutions in detail to their issue that may solve the problem before the custom support arrives.\n5. Thank them for their patience\n\nUse a friendly, professional tone. Address the customer by first name in your response if it is available. Keep the response detailed yet concise, under 250 words.\n\nRETURN ONLY THE FINAL RESPONSE EMAIL MESSAGE IN DETAIL READY TO SEND VIA EMAIL WITH NO EXPLANATION, ADDITIONAL, OR OMITTED TEXT.","maxTokens":"300","temperature":"0.3"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","outputs":{"generatedText":"","tokenCount":0,"error":""}},{"id":"sendCustomerResponse","text":"Send Customer Response","x":1136,"y":304,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"{{receiveCustomerEmail.from}}","subject":"Re: {{receiveCustomerEmail.subject}} [{{generateTicket.result.ticketNumber}}]","body":"{{generateCustomerResponse.generatedText}}","isHtml":false,"attachments":[]},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","outputs":{"success":false,"messageId":"","error":null}},{"id":"generateInternalSummary","text":"Generate Internal Summary","x":1456,"y":176,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a concise internal summary of the support ticket for the support team. \n\nInclude:\n\n1. Ticket number: {{generateTicket.result.ticketNumber}}\n2. Category: {{generateTicket.result.ticket.category}}\n3. Priority: {{generateTicket.result.ticket.priority}}\n4. Customer email: {{generateTicket.result.ticket.customerEmail}}\n5. Summary: {{generateTicket.result.ticket.summary}}\n\nKeep it brief and professional, highlighting key points for quick understanding. Max 100 words.","maxTokens":"300","temperature":"0.3"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","outputs":{"generatedText":"","tokenCount":0,"error":""}},{"id":"sendInternalEmail","text":"Send Internal Email","x":1456,"y":240,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"admin@bizop.io","subject":"New Support Ticket: {{generateTicket.result.ticketNumber}} - {{generateTicket.result.ticket.category}}","body":"{{generateInternalSummary.generatedText}}\n\nOriginal Email:\n\nSubject: {{receiveCustomerEmail.subject}}\nBody: {{receiveCustomerEmail.body}}","isHtml":false,"attachments":[]},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","outputs":{"success":false,"messageId":"","error":null}},{"id":"96d0d35b-e323-4dd3-b874-481e3c171a30","text":"Email Support System","x":1136,"y":112,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","outputs":{}}],"edges":[{"id":"1724531720286","start":{"id":"analyzeEmailContent","type":"output"},"end":{"id":"generateTicket","type":"input"},"startX":1104,"startY":264,"endX":1136,"endY":200},{"id":"1724531723889","start":{"id":"generateTicket","type":"output"},"end":{"id":"generateCustomerResponse","type":"input"},"startX":1424,"startY":200,"endX":1136,"endY":264},{"id":"1724531727570","start":{"id":"generateCustomerResponse","type":"output"},"end":{"id":"sendCustomerResponse","type":"input"},"startX":1424,"startY":264,"endX":1136,"endY":328},{"id":"1724531731432","start":{"id":"sendCustomerResponse","type":"output"},"end":{"id":"generateInternalSummary","type":"input"},"startX":1424,"startY":328,"endX":1456,"endY":200},{"id":"1724531734632","start":{"id":"generateInternalSummary","type":"output"},"end":{"id":"sendInternalEmail","type":"input"},"startX":1744,"startY":200,"endX":1456,"endY":264},{"id":"1516511d-0814-4428-8659-654852e775ed","start":{"id":"receiveCustomerEmail","type":"output"},"end":{"id":"analyzeEmailContent","type":"input"},"startX":1104,"startY":200,"endX":816,"endY":264,"condition":"equals"}],"zoomLevel":1,"canvasOffsetX":-616,"canvasOffsetY":261,"isTinyNodeMode":false}
    
    USER QUERY:
    "Simple Email Forward"
    RESULT:
    {"id":"f6bbe63e-440e-4759-9d14-3ade4a9b1179","nodes":[{"id":"receiveEmail","text":"Receive Email","x":816,"y":176,"isEditing":false,"type":"receive-email","icon":"inbox","category":"trigger","isSelected":false,"parameters":{"emailAddress":""},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received. Returns the received email details like from address, subject, body, etc.","outputs":{"from":"","subject":"","body":"","attachments":[]}},{"id":"forwardEmail","text":"Forward Email","x":816,"y":240,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"forward@example.com","subject":"Fwd: {{receiveEmail.subject}}","body":"Forwarded message:\n\nFrom: {{receiveEmail.from}}\nSubject: {{receiveEmail.subject}}\n\n{{receiveEmail.body}}","isHtml":false,"attachments":"{{receiveEmail.attachments}}"},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","outputs":{"success":false,"messageId":"","error":null}},{"id":"emailForwarderLabel","text":"Simple Email Forwarder","x":816,"y":112,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","outputs":{}}],"edges":[{"id":"edge1","start":{"id":"receiveEmail","type":"output"},"end":{"id":"forwardEmail","type":"input"},"startX":1104,"startY":200,"endX":816,"endY":264}],"zoomLevel":1,"canvasOffsetX":-350,"canvasOffsetY":238,"isTinyNodeMode":false}

    USER QUERY:
    "Customer Support System"
    RESULT:
    {"id":"eedb4641-a8b5-45d7-8d6b-b0021548750a","nodes":[{"id":"receiveCustomerEmail","text":"Receive Customer Email","x":240,"y":128,"isEditing":false,"type":"receive-email","icon":"inbox","category":"trigger","isSelected":false,"parameters":{"emailAddress":""},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received. Returns the received email details like from address, subject, body, etc.","outputs":{"from":"","subject":"","body":"","attachments":[]}},{"id":"analyzeEmailContent","text":"Analyze Email Content","x":240,"y":208,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the following customer support email and return a JSON object with the following properties: \ncategory (e.g., 'Technical', 'Billing', 'Product Inquiry'), \npriority (1-5, where 1 is highest), \nand a brief summary (max 50 words).\n\nExample:\n{\ncategory: \"Technical\",\npriority: 2,\nsummary: \"Customer is experiencing difficulties logging into their account and requires assistance.\"\n}\n\nEmail Subject: {{receiveCustomerEmail.subject}}\nEmail Body: {{receiveCustomerEmail.body}}\n\nReturn ONLY the JSON object ready to run without any additional text or explanation.","maxTokens":"300","temperature":"0.3"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","outputs":{"generatedText":"","tokenCount":0,"error":""}},{"id":"generateTicket","text":"Generate Ticket","x":240,"y":288,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const ticketInfo = {{analyzeEmailContent.generatedText}};\nconst ticketNumber = 'TKT-' + Date.now().toString(36).toUpperCase();\nconst ticket = {\n    number: ticketNumber,\n    category: ticketInfo.category,\n    priority: ticketInfo.priority,\n    summary: ticketInfo.summary,\n    status: 'Open',\n    createdAt: new Date().toISOString(),\n    customerEmail: '{{receiveCustomerEmail.from}}',\n    subject: '{{receiveCustomerEmail.subject}}',\n    body: \`{{receiveCustomerEmail.body}}\`\n};\nreturn { ticketNumber, ticket };"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","outputs":{"result":null,"error":""}},{"id":"generateCustomerResponse","text":"Generate Customer Response","x":240,"y":368,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Instructions:\nYour name is Albert, and you are a helpful TaskTitan customer support rep. Please generate a polite, helpful, and detailed introductory response to the customer acknowledging their support request. \n\nComplete Ticket Details:\n{{generateTicket.result.ticket}}\n\nInclude the following information in your response:\n1. Ticket number: {{generateTicket.result.ticketNumber}}\n2. Introduce yourself + Brief acknowledgment of their issue\n3. Choose an estimated response time based on this tickets priority level: {{generateTicket.result.ticket.priority}}\n(Priority 1-2 = 4 hours, Priority 3-4 = 24 hours, Priority 5 = 48 hours) - Choose the most appropriate time estimate based on the priority level.\n4/ Generate a few potential common solutions in detail to their issue that may solve the problem before the custom support arrives.\n5. Thank them for their patience\n\nUse a friendly, professional tone. Address the customer by first name in your response if it is available. Keep the response detailed yet concise, under 250 words.\n\nRETURN ONLY THE FINAL RESPONSE EMAIL MESSAGE IN DETAIL READY TO SEND VIA EMAIL WITH NO EXPLANATION, ADDITIONAL, OR OMITTED TEXT.","maxTokens":"300","temperature":"0.3"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","outputs":{"generatedText":"","tokenCount":0,"error":""}},{"id":"sendCustomerResponse","text":"Send Customer Response","x":240,"y":448,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"{{receiveCustomerEmail.from}}","subject":"Re: {{receiveCustomerEmail.subject}} [{{generateTicket.result.ticketNumber}}]","body":"{{generateCustomerResponse.generatedText}}","isHtml":false,"attachments":[]},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","outputs":{"success":false,"messageId":"","error":null}},{"id":"generateInternalSummary","text":"Generate Internal Summary","x":240,"y":528,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a concise internal summary of the support ticket for the support team. \n\nInclude:\n\n1. Ticket number: {{generateTicket.result.ticketNumber}}\n2. Category: {{generateTicket.result.ticket.category}}\n3. Priority: {{generateTicket.result.ticket.priority}}\n4. Customer email: {{generateTicket.result.ticket.customerEmail}}\n5. Summary: {{generateTicket.result.ticket.summary}}\n\nKeep it brief and professional, highlighting key points for quick understanding. Max 100 words.","maxTokens":"300","temperature":"0.3"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","outputs":{"generatedText":"","tokenCount":0,"error":""}},{"id":"sendInternalEmail","text":"Send Internal Email","x":240,"y":608,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"admin@bizop.io","subject":"New Support Ticket: {{generateTicket.result.ticketNumber}} - {{generateTicket.result.ticket.category}}","body":"{{generateInternalSummary.generatedText}}\n\nOriginal Email:\n\nSubject: {{receiveCustomerEmail.subject}}\nBody: {{receiveCustomerEmail.body}}","isHtml":false,"attachments":[]},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","outputs":{"success":false,"messageId":"","error":null}},{"id":"d23fe1a2-d150-4345-ae8a-3589adda281c","text":"Customer Support System","x":240,"y":48,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","outputs":{}}],"edges":[{"id":"1724343756402","start":{"id":"receiveCustomerEmail","type":"output"},"end":{"id":"analyzeEmailContent","type":"input"},"startX":528,"startY":152,"endX":240,"endY":232},{"id":"1724343807277","start":{"id":"analyzeEmailContent","type":"output"},"end":{"id":"generateTicket","type":"input"},"startX":528,"startY":232,"endX":240,"endY":312},{"id":"1724343876228","start":{"id":"generateTicket","type":"output"},"end":{"id":"generateCustomerResponse","type":"input"},"startX":528,"startY":312,"endX":240,"endY":392},{"id":"1724343935867","start":{"id":"generateCustomerResponse","type":"output"},"end":{"id":"sendCustomerResponse","type":"input"},"startX":528,"startY":392,"endX":240,"endY":472},{"id":"1724344018217","start":{"id":"sendCustomerResponse","type":"output"},"end":{"id":"generateInternalSummary","type":"input"},"startX":528,"startY":472,"endX":240,"endY":552},{"id":"1724344020367","start":{"id":"generateInternalSummary","type":"output"},"end":{"id":"sendInternalEmail","type":"input"},"startX":528,"startY":552,"endX":240,"endY":632}],"zoomLevel":1,"canvasOffsetX":243,"canvasOffsetY":152,"isTinyNodeMode":false}

    USER QUERY:
    "Email Sentiment Analyzer"
    RESULT:
    {"id":"b0e10445-a50a-437a-b38e-df695c278cb3","nodes":[{"id":"receiveEmail","text":"Receive Email","x":816,"y":176,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"sentiment@example.com"},"outputs":{"from":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received.","isSelected":false},{"id":"analyzeSentiment","text":"Analyze Sentiment","x":816,"y":240,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the sentiment of the following email. Provide a JSON object with these properties:\n- sentiment: (positive, neutral, or negative)\n- score: (a number between -1 and 1, where -1 is very negative, 0 is neutral, and 1 is very positive)\n- keywords: (an array of up to 5 key words or phrases that contribute to the sentiment)\n- summary: (a brief 1-2 sentence summary of the email content)\n\nEmail Subject: {{receiveEmail.subject}}\nEmail Body: {{receiveEmail.body}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"300","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node uses an AI model to analyze the sentiment of the email content.","isSelected":false},{"id":"processResults","text":"Process Results","x":816,"y":304,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const sentimentAnalysis = {{analyzeSentiment.generatedText}};\nconst from = {{receiveEmail.from}};\nconst subject = {{receiveEmail.subject}};\n\nreturn {\n  from,\n  subject,\n  sentiment: sentimentAnalysis.sentiment,\n  score: sentimentAnalysis.score,\n  keywords: sentimentAnalysis.keywords,\n  summary: sentimentAnalysis.summary\n};"},"outputs":{"result":null,"error":""},"description":"This utility node processes the sentiment analysis results and prepares data for the next steps.","isSelected":false},{"id":"generateResponse","text":"Generate Response","x":816,"y":368,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a brief, professional response to the analyzed email. Use the following information:\n\nFrom: {{processResults.result.from}}\nSubject: {{processResults.result.subject}}\nSentiment: {{processResults.result.sentiment}}\nScore: {{processResults.result.score}}\nSummary: {{processResults.result.summary}}\n\nThe response should:\n1. Thank the sender for their email\n2. Acknowledge the general tone of their message (positive, neutral, or negative)\n3. Provide a brief, empathetic response based on the sentiment\n4. Assure them that their feedback is valued\n5. Mention that a team member will follow up if necessary\n\nKeep the response under 100 words and maintain a professional, friendly tone.","maxTokens":"200","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node generates an appropriate response based on the sentiment analysis.","isSelected":false},{"id":"sendResponse","text":"Send Response","x":816,"y":432,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{processResults.result.from}}","subject":"Re: {{processResults.result.subject}}","body":"{{generateResponse.generatedText}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node sends the generated response back to the original sender.","isSelected":false},{"id":"logSentimentData","text":"Log Sentiment Data","x":1136,"y":176,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const logEntry = {\n  timestamp: new Date().toISOString(),\n  from: {{processResults.result.from}},\n  subject: {{processResults.result.subject}},\n  sentiment: {{processResults.result.sentiment}},\n  score: {{processResults.result.score}},\n  keywords: {{processResults.result.keywords}},\n  summary: {{processResults.result.summary}}\n};\n\n// In a real scenario, you would send this data to a database or logging service\nconsole.log('Sentiment Log Entry:', JSON.stringify(logEntry, null, 2));\n\nreturn { logged: true };"},"outputs":{"result":null,"error":""},"description":"This utility node logs the sentiment analysis data for future reference and reporting.","isSelected":false},{"id":"notifyTeam","text":"Notify Team","x":1136,"y":240,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"nathancwilbanks@gmail.com","subject":"New Sentiment Analysis: {{processResults.result.sentiment}}","body":"A new email has been analyzed:\n\nFrom: {{processResults.result.from}}\nSubject: {{processResults.result.subject}}\nSentiment: {{processResults.result.sentiment}}\nScore: {{processResults.result.score}}\n\nSummary: {{processResults.result.summary}}\n\nKeywords: {{processResults.result.keywords}}\n\nPlease review and take appropriate action if necessary.","isHtml":false,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node notifies the support team about the new sentiment analysis.","isSelected":false},{"id":"emailSentimentAnalyzerLabel","text":"Email Sentiment Analyzer","x":816,"y":112,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Email Sentiment Analyzer workflow.","isSelected":false}],"edges":[{"id":"edge1","start":{"id":"receiveEmail","type":"output"},"end":{"id":"analyzeSentiment","type":"input"},"startX":1104,"startY":200,"endX":816,"endY":264},{"id":"edge2","start":{"id":"analyzeSentiment","type":"output"},"end":{"id":"processResults","type":"input"},"startX":1104,"startY":264,"endX":816,"endY":328},{"id":"edge3","start":{"id":"processResults","type":"output"},"end":{"id":"generateResponse","type":"input"},"startX":1104,"startY":328,"endX":816,"endY":392},{"id":"edge4","start":{"id":"generateResponse","type":"output"},"end":{"id":"sendResponse","type":"input"},"startX":1104,"startY":392,"endX":816,"endY":456},{"id":"edge5","start":{"id":"processResults","type":"output"},"end":{"id":"logSentimentData","type":"input"},"startX":1104,"startY":328,"endX":1136,"endY":200},{"id":"edge6","start":{"id":"logSentimentData","type":"output"},"end":{"id":"notifyTeam","type":"input"},"startX":1424,"startY":200,"endX":1136,"endY":264}],"zoomLevel":1,"canvasOffsetX":-466,"canvasOffsetY":218,"isTinyNodeMode":false}

    USER QUERY:
    "Automated Email Summarizer"
    RESULT:
    {"id":"42067c5f-aa28-4b99-a29b-c45a6c51fff4","nodes":[{"id":"receiveEmail","text":"Receive Email","x":816,"y":176,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"summarize@example.com"},"outputs":{"from":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received.","isSelected":false},{"id":"summarizeEmail","text":"Summarize Email","x":816,"y":240,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Summarize the following email content. Provide a JSON object with these properties:\n- summary: (a concise summary of the email content in 2-3 sentences)\n- keyPoints: (an array of up to 5 key points from the email)\n- actionItems: (an array of any action items or tasks mentioned in the email)\n- sentiment: (overall sentiment of the email: positive, neutral, or negative)\n\nEmail Subject: {{receiveEmail.subject}}\nEmail Body: {{receiveEmail.body}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"300","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node uses an AI model to summarize the email content.","isSelected":false},{"id":"processResults","text":"Process Results","x":816,"y":304,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const emailSummary = {{summarizeEmail.generatedText}};\nconst from = {{receiveEmail.from}};\nconst subject = {{receiveEmail.subject}};\n\nreturn {\n  from,\n  subject,\n  summary: emailSummary.summary,\n  keyPoints: emailSummary.keyPoints,\n  actionItems: emailSummary.actionItems,\n  sentiment: emailSummary.sentiment\n};"},"outputs":{"result":null,"error":""},"description":"This utility node processes the email summary results and prepares data for the next steps.","isSelected":false},{"id":"generateResponse","text":"Generate Response","x":816,"y":368,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a brief, professional response to the summarized email. Use the following information:\n\nFrom: {{processResults.result.from}}\nSubject: {{processResults.result.subject}}\nSummary: {{processResults.result.summary}}\nKey Points: {{processResults.result.keyPoints}}\nAction Items: {{processResults.result.actionItems}}\nSentiment: {{processResults.result.sentiment}}\n\nThe response should:\n1. Thank the sender for their email\n2. Confirm that you've received and summarized their message\n3. Briefly mention the key points you've identified\n4. List any action items that were noted\n5. Provide a short, appropriate response based on the overall sentiment\n6. Offer to provide more details or clarification if needed\n\nKeep the response under 150 words and maintain a professional, friendly tone.","maxTokens":"250","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node generates an appropriate response based on the email summary.","isSelected":false},{"id":"sendResponse","text":"Send Response","x":816,"y":432,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{processResults.result.from}}","subject":"Re: {{processResults.result.subject}}","body":"{{generateResponse.generatedText}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node sends the generated response back to the original sender.","isSelected":false},{"id":"logSummaryData","text":"Log Summary Data","x":1136,"y":176,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const logEntry = {\n  timestamp: new Date().toISOString(),\n  from: '{{processResults.result.from}}',\n  subject: '{{processResults.result.subject}}',\n  summary: '{{processResults.result.summary}}',\n  keyPoints: {{processResults.result.keyPoints}},\n  actionItems: {{processResults.result.actionItems}},\n  sentiment: '{{processResults.result.sentiment}}'\n};\n\n// In a real scenario, you would send this data to a database or logging service\nconsole.log('Email Summary Log Entry:', JSON.stringify(logEntry, null, 2));\n\nreturn { logged: true };"},"outputs":{"result":null,"error":""},"description":"This utility node logs the email summary data for future reference and reporting.","isSelected":false},{"id":"notifyTeam","text":"Notify Team","x":1136,"y":240,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"team@example.com","subject":"New Email Summary: {{processResults.result.subject}}","body":"A new email has been summarized:\n\nFrom: {{processResults.result.from}}\nSubject: {{processResults.result.subject}}\n\nSummary: {{processResults.result.summary}}\n\nKey Points:\n{{processResults.result.keyPoints}}\n\nAction Items:\n{{processResults.result.actionItems}}\n\nSentiment: {{processResults.result.sentiment}}\n\nPlease review and take appropriate action if necessary.","isHtml":false,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node notifies the team about the new email summary.","isSelected":false},{"id":"emailSummarizerLabel","text":"Automated Email Summarizer","x":816,"y":112,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Automated Email Summarizer workflow.","isSelected":false}],"edges":[{"id":"edge1","start":{"id":"receiveEmail","type":"output"},"end":{"id":"summarizeEmail","type":"input"},"startX":1104,"startY":200,"endX":816,"endY":264},{"id":"edge2","start":{"id":"summarizeEmail","type":"output"},"end":{"id":"processResults","type":"input"},"startX":1104,"startY":264,"endX":816,"endY":328},{"id":"edge3","start":{"id":"processResults","type":"output"},"end":{"id":"generateResponse","type":"input"},"startX":1104,"startY":328,"endX":816,"endY":392},{"id":"edge4","start":{"id":"generateResponse","type":"output"},"end":{"id":"sendResponse","type":"input"},"startX":1104,"startY":392,"endX":816,"endY":456},{"id":"edge5","start":{"id":"processResults","type":"output"},"end":{"id":"logSummaryData","type":"input"},"startX":1104,"startY":328,"endX":1136,"endY":200},{"id":"edge6","start":{"id":"logSummaryData","type":"output"},"end":{"id":"notifyTeam","type":"input"},"startX":1424,"startY":200,"endX":1136,"endY":264}],"zoomLevel":1,"canvasOffsetX":-450,"canvasOffsetY":201,"isTinyNodeMode":false}

    USER QUERY:
    "Meeting Minutes Summarizer"
    RESULT:
    {"id":"bf82599b-64fc-4c1c-adbf-6d09fb8983ec","nodes":[{"id":"receiveMinutes","text":"Receive Meeting Minutes","x":240,"y":128,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"minutes@example.com"},"outputs":{"from":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming emails containing meeting minutes.","isSelected":false},{"id":"summarizeMinutes","text":"Summarize Minutes","x":240,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Summarize the following meeting minutes. Provide a JSON object with these properties:\n- summary: (a concise summary of the meeting in 3-4 sentences)\n- keyPoints: (an array of up to 5 key points discussed in the meeting)\n- actionItems: (an array of action items or tasks assigned during the meeting)\n- attendees: (an array of attendee names and titles as mentioned in the minutes)\n- attendeesToCC: (an array of attendee emails as mentioned in the minutes)\n\nMeeting Subject: {{receiveMeetingMinutes.subject}}\nMeeting Minutes:\n{{receiveMeetingMinutes.body}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"500","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node uses an AI model to summarize the meeting minutes.","isSelected":false},{"id":"formatSummary","text":"Format Summary","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const minutesSummary = {{summarizeMinutes.generatedText}};\nconst formattedSummary =\`\n<h1>Meeting Summary</h1>\n<p>\${minutesSummary.summary}</p>\n<h2>Key Points</h2>\n<ul>\n\${minutesSummary.keyPoints.map(point =>\`<li>\${point}</li>\`).join('')}\n</ul>\n<h2>Action Items</h2>\n<ul>\n\${minutesSummary.actionItems.map(item =>\`<li>\${item}</li>\`).join('')}\n</ul>\n<h2>Attendees</h2>\n<p>\${minutesSummary.attendees.join(', ')}</p>\n\`;\n\nreturn { formattedSummary, attendees: minutesSummary.attendees, attendeesToCC: minutesSummary.attendeesToCC };"},"outputs":{"result":null,"error":""},"description":"This utility node formats the summary into an HTML structure with basic styling.","isSelected":false},{"id":"sendSummary","text":"Send Summary to Attendees","x":240,"y":320,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{receiveMeetingMinutes.from}}","subject":"Meeting Summary: {{receiveMeetingMinutes.subject}}","body":"Send to: {{formatSummary.result.attendeesToCC}}\n\n{{formatSummary.result.formattedSummary}}","isHtml":true,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node sends the formatted summary to all attendees.","isSelected":false},{"id":"logSummary","text":"Log Summary","x":240,"y":384,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const logEntry = {\n timestamp: new Date().toISOString(),\n meetingSubject: {{receiveMeetingMinutes.subject}},\n attendees: {{formatSummary.result.attendees}},\n summary: {{summarizeMinutes.generatedText}}\n};\n\n// In a real scenario, you would send this data to a database or logging service\nconsole.log('Meeting Summary Log Entry:', JSON.stringify(logEntry, null, 2));\n\nreturn { logged: true };"},"outputs":{"result":null,"error":""},"description":"This utility node logs the meeting summary data for future reference and reporting.","isSelected":false},{"id":"meetingMinutesSummarizerLabel","text":"Meeting Minutes Summarizer","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Meeting Minutes Summarizer workflow.","isSelected":false}],"edges":[{"id":"edge1","start":{"id":"receiveMinutes","type":"output"},"end":{"id":"summarizeMinutes","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge2","start":{"id":"summarizeMinutes","type":"output"},"end":{"id":"formatSummary","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"edge3","start":{"id":"formatSummary","type":"output"},"end":{"id":"sendSummary","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"edge4","start":{"id":"sendSummary","type":"output"},"end":{"id":"logSummary","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408}],"zoomLevel":1,"canvasOffsetX":233,"canvasOffsetY":218,"isTinyNodeMode":false}

    USER QUERY:
    "Sales Lead Qualification and Routing"
    RESULT:
    {"id":"04add7fe-6deb-4e02-b137-b4c6ed6d2aa7","nodes":[{"id":"receiveInquiry","text":"Receive Sales Inquiry","x":240,"y":128,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"sales@example.com"},"outputs":{"from":"","to":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming sales inquiries via email.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"analyzeLead","text":"Analyze and Score Lead","x":240,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the following sales inquiry email. Extract key information and score the lead. Provide a JSON object with these properties:\n- score: (a number between 1-100, where 100 is the highest quality lead)\n- keyInfo: (an object containing key information such as company name, contact person, product interest, etc.)\n- category: (categorize the lead as 'Hot', 'Warm', or 'Cold')\n- reason: (a brief explanation for the score and category)\n\nEmail Subject: {{receiveSalesInquiry.subject}}\nEmail Body: {{receiveSalesInquiry.body}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"500","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node uses an AI model to analyze and score the sales lead.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"routeLead","text":"Route Lead","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const leadInfo = JSON.parse({{analyzeAndScoreLead.generatedText}});\nconst from = {{receiveSalesInquiry.from}};\nconst subject = {{receiveSalesInquiry.subject}};\n\nlet assignTo = \"\";\nlet responseTemplate = \"\";\n\nswitch (leadInfo.category) {\n case \"Hot\":\n assignTo = \"admin@bizop.io\";\n responseTemplate = \"hot-lead\";\n break;\n case \"Warm\":\n assignTo = \"nathan@bizop.io\";\n responseTemplate = \"warm-lead\";\n break;\n case \"Cold\":\n assignTo = \"nathancwilbanks@gmail.com\";\n responseTemplate = \"cold-lead\";\n break;\n default:\n assignTo = \"nathancwilbanks@gmail.com\";\n responseTemplate = \"general-lead\";\n}\n\nreturn {\n from,\n subject,\n leadInfo,\n assignTo,\n responseTemplate\n};"},"outputs":{"result":null,"error":""},"description":"This utility node determines the appropriate sales team and response template based on the lead score and category.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"notifySalesTeam","text":"Notify Sales Team","x":560,"y":128,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{routeLead.result.assignTo}}","subject":"[{{routeLead.result.leadInfo.category}}] New Lead: {{routeLead.result.subject}}","body":"A new lead has been received and analyzed:\n\nFrom: {{routeLead.result.from}}\nSubject: {{routeLead.result.subject}}\n\nLead Score: {{routeLead.result.leadInfo.score}}\nCategory: {{routeLead.result.leadInfo.category}}\nReason: {{routeLead.result.leadInfo.reason}}\n\nKey Information:\n{{routeLead.result.leadInfo.keyInfo}}\n\nOriginal Email:\n{{receiveSalesInquiry.body}}\n\nPlease follow up with this lead as soon as possible.","isHtml":false,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node notifies the appropriate sales team about the new lead.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"generateResponse","text":"Generate Personalized Response","x":560,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"Generate a personalized response to the sales inquiry based on the lead information and template. Use the following information:\n\nLead Information: {{routeLead.result.leadInfo}}\nResponse Template: {{routeLead.result.responseTemplate}}\n\nThe response should:\n1. Thank the sender for their inquiry\n2. Acknowledge their specific interests or needs\n3. Provide a brief, relevant piece of information or benefit about our product/service\n4. Outline the next steps (e.g., scheduling a call, demo, or sending more information)\n5. Include a friendly closing with the name Albert\n\nImportant:\n1. Do NOT mention lead status or score or any internal analyzation details to the sender.\n2. NEVER use placeholders within your message (e.g. [Prospect]). This is going directly to the sender so it must read like a personally written email from one person to another.\n3. Use the sender's name (e.g. Hi Nathan, ) ONLY if you know it from prior messages or info. If name is not known just say \"Hi there, \" to start your message.\n\nKeep the response under 200 words and maintain a professional, engaging tone.","maxTokens":"300","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node generates a personalized response to the sales inquiry.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendResponse","text":"Send Response to Lead","x":560,"y":256,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{routeLead.result.from}}","subject":"Re: {{routeLead.result.subject}}","body":"{{generatePersonalizedResponse.generatedText}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"messageId":"","error":null},"description":"This action node sends the personalized response back to the lead.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"salesLeadQualificationLabel","text":"Sales Lead Qualification and Routing","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Sales Lead Qualification and Routing workflow.","isSelected":false,"isActive":false,"error":null,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveInquiry","type":"output"},"end":{"id":"analyzeLead","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge2","start":{"id":"analyzeLead","type":"output"},"end":{"id":"routeLead","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"edge3","start":{"id":"routeLead","type":"output"},"end":{"id":"notifySalesTeam","type":"input"},"startX":528,"startY":280,"endX":560,"endY":152},{"id":"edge4","start":{"id":"routeLead","type":"output"},"end":{"id":"generateResponse","type":"input"},"startX":528,"startY":280,"endX":560,"endY":216},{"id":"edge5","start":{"id":"generateResponse","type":"output"},"end":{"id":"sendResponse","type":"input"},"startX":848,"startY":216,"endX":560,"endY":280}],"zoomLevel":1,"canvasOffsetX":133,"canvasOffsetY":292,"isTinyNodeMode":false}

    USER QUERY:
    "Competitive Intelligence Tracker"
    RESULT:
    {"id":"9597cb2c-eec9-47ae-84fb-ca8db9760a49","nodes":[{"id":"receiveCompetitorUpdate","text":"Receive Competitor Update","x":240,"y":128,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"competitor-updates@example.com"},"outputs":{"from":"","to":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming emails containing competitor updates.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"analyzeUpdate","text":"Analyze Competitor Update","x":240,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the following competitor update email. Extract key information and assess its potential impact. Provide a JSON object with these properties:\n- competitor: (name of the competitor)\n- updateType: (e.g., 'Product Launch', 'Price Change', 'Marketing Campaign', 'Partnership', etc.)\n- keyPoints: (array of up to 5 key points from the update)\n- potentialImpact: (assess the potential impact on our business, rate as 'High', 'Medium', or 'Low')\n- actionRecommendations: (array of up to 3 recommended actions we should consider in response)\n\nEmail Subject: {{receiveCompetitorUpdate.subject}}\nEmail Body: {{receiveCompetitorUpdate.body}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"500","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node uses an AI model to analyze the competitor update and assess its potential impact.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"updateGoogleSheet","text":"Update Google Sheet","x":560,"y":128,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"write","spreadsheetId":"","range":"Sheet1!A1","values":"[{{parseAnalysis.result.date}}, {{parseAnalysis.result.competitor}}, {{parseAnalysis.result.updateType}}, {{parseAnalysis.result.keyPoints}}, {{parseAnalysis.result.potentialImpact}}, {{parseAnalysis.result.actionRecommendations}}]"},"outputs":{"success":false,"result":[],"error":""},"description":"This action node updates a Google Sheet with the analyzed competitor update information.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"generateBriefing","text":"Generate Strategy Briefing","x":560,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a concise strategy briefing based on the competitor update analysis. Use the following information:\n\nCompetitor Update Analysis: {{analyzeCompetitorUpdate.generatedText}}\n\nThe briefing should include:\n1. A brief introduction summarizing the competitor and update type\n2. Key points of the update\n3. Assessment of potential impact on our business\n4. Recommended actions\n5. A call to action for the strategy team\n\nKeep the briefing professional, concise, and actionable. Limit the response to 250 words.","maxTokens":"350","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node generates a strategy briefing based on the analyzed competitor update.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendBriefing","text":"Send Briefing to Strategy Team","x":560,"y":256,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"nathancwilbanks@gmail.com","subject":"Competitor Update: {{parseAnalysis.result.competitor}} - {{parseAnalysis.result.updateType}}","body":"{{generateStrategyBriefing.generatedText}}\n\nFor more details, please refer to the Competitor Updates spreadsheet.","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node sends the strategy briefing to the strategy team via email.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"competitiveIntelligenceLabel","text":"Competitive Intelligence Tracker","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Competitive Intelligence Tracker workflow.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"ebf7475b-fd09-4aee-a3f3-d0f04066a589","text":"Parse Analysis","x":240,"y":256,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const update = JSON.parse({{analyzeCompetitorUpdate.generatedText}});\nconst date = new Date().toISOString();\n\nreturn { \n  date, \n  competitor: update.competitor, \n  updateType: update.updateType, \n  keyPoints: update.keyPoints, \n  potentialImpact: update.potentialImpact, \n  actionRecommendations: update.actionRecommendations \n};"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","error":null,"isActive":false,"output":null,"outputs":{"result":null,"error":""}}],"edges":[{"id":"edge1","start":{"id":"receiveCompetitorUpdate","type":"output"},"end":{"id":"analyzeUpdate","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge4","start":{"id":"generateBriefing","type":"output"},"end":{"id":"sendBriefing","type":"input"},"startX":848,"startY":216,"endX":560,"endY":280},{"id":"f411c95c-d4e8-493c-b9cf-7dc55a8aa061","start":{"id":"analyzeUpdate","type":"output"},"end":{"id":"ebf7475b-fd09-4aee-a3f3-d0f04066a589","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"78b3f445-f2cb-4847-ac1b-223c55975b2f","start":{"id":"ebf7475b-fd09-4aee-a3f3-d0f04066a589","type":"output"},"end":{"id":"updateGoogleSheet","type":"input"},"startX":528,"startY":280,"endX":560,"endY":152},{"id":"40398f2b-a149-4b8f-97d7-972cd9b7b9b9","start":{"id":"ebf7475b-fd09-4aee-a3f3-d0f04066a589","type":"output"},"end":{"id":"generateBriefing","type":"input"},"startX":528,"startY":280,"endX":560,"endY":216}],"zoomLevel":1,"canvasOffsetX":148,"canvasOffsetY":269,"isTinyNodeMode":false}

    USER QUERY:
    "Employee Onboarding System"
    RESULT:
    {"id":"1fa9274d-fb8e-46f0-ba6b-3f63fa2fb0c4","nodes":[{"id":"newEmployeeAdded","text":"New Employee Added","x":240,"y":128,"type":"google-sheets-new-row","icon":"table","category":"trigger","parameters":{"spreadsheetId":"","sheetName":"Sheet1"},"outputs":{"newRow":{}},"description":"This trigger node listens for new rows added to a Google Sheet and triggers the workflow when a new employee is added.","isSelected":false,"isActive":false,"error":null,"output":null,"isEditing":false},{"id":"generateOnboardingChecklist","text":"Generate Onboarding Checklist","x":240,"y":256,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a personalized onboarding checklist for a new employee. Use the following information:\n\nEmployee Name: {{getEmployeeData.result.employee.name}}\nEmail: {{getEmployeeData.result.employee.email}}\nPosition: {{getEmployeeData.result.employee.position}}\nDepartment: {{getEmployeeData.result.employee.department}}\nStart Date: {{getEmployeeData.result.employee.startDate}}\n\nCreate a JSON object with the following properties:\n- welcomeMessage: A personalized welcome message\n- checklistItems: An array of onboarding tasks, each with 'task' and 'dueDate' properties, sorted by date\n- resources: An array of relevant resources or documents for the employee's role\n\nEnsure the checklist is tailored to the employee's position and department. Include standard onboarding tasks as well as role-specific items.\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"500","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node generates a personalized onboarding checklist for the new employee.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"formatWelcomeEmail","text":"Format Welcome Email","x":240,"y":320,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const employeeData = {{getEmployeeData.result.employee}};\nconst checklist = JSON.parse({{generateOnboardingChecklist.generatedText}});\n\nconst formattedChecklist = checklist.checklistItems.map(item => \n \`- \${item.task} (Due: \${item.dueDate})\`\n).join('\\n');\n\nconst formattedResources = checklist.resources.map(resource => \n \`- \${resource}\`\n).join('\\n');\n\nconst emailBody = \`Dear \${employeeData.name},\n\n\${checklist.welcomeMessage}\n\nHere's your personalized onboarding checklist:\n\n\${formattedChecklist}\n\nHelpful resources for your role:\n\n\${formattedResources}\n\nIf you have any questions, please don't hesitate to reach out to HR or your manager.\n\nWe're excited to have you on board!\n\nBest regards,\nHR Team\`;\n\nreturn { emailBody };"},"outputs":{"result":null,"error":""},"description":"This utility node formats the welcome email with the personalized onboarding checklist.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendWelcomeEmail","text":"Send Welcome Email","x":576,"y":320,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{getEmployeeData.result.employee.email}}","subject":"Welcome to Our Company - Your Onboarding Checklist","body":"{{formatWelcomeEmail.result.emailBody}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node sends the welcome email with the onboarding checklist to the new employee.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"updateTaskSheet","text":"Update Task Sheet","x":576,"y":192,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"write","spreadsheetId":"","range":"Sheet2","values":"{{formatTaskData.result.taskData}}"},"outputs":{"success":false,"result":[],"error":""},"description":"This action node updates a Google Sheet with the new employee's onboarding tasks.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"formatTaskData","text":"Format Task Data","x":576,"y":128,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const employeeData = {{getEmployeeData.result.employee}};\nconst checklist = JSON.parse({{generateOnboardingChecklist.generatedText}});\n\nconst taskData = checklist.checklistItems.map(item => [\n employeeData.name,\n employeeData.email,\n employeeData.position,\n employeeData.department,\n item.task,\n item.dueDate,\n 'Not Started'\n]);\n\nreturn { taskData };"},"outputs":{"result":null,"error":""},"description":"This utility node formats the task data for updating the Google Sheet.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"employeeOnboardingLabel","text":"Employee Onboarding Workflow","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Employee Onboarding Workflow.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"5759fec9-5d04-4162-8f8e-daeba8ee464f","text":"Get Employee Data","x":240,"y":192,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const newRow = {{newEmployeeAdded.newRow}};\nconst employee = {\n  name: newRow[0],\n  email: newRow[1],\n  position: newRow[2],\n  department: newRow[3],\n  startDate: newRow[4]\n}\nreturn { employee };"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","error":null,"isActive":false,"output":null,"outputs":{"result":null,"error":""}}],"edges":[{"id":"edge5","start":{"id":"formatTaskData","type":"output"},"end":{"id":"updateTaskSheet","type":"input"},"startX":864,"startY":152,"endX":576,"endY":216},{"id":"078480fb-ccb5-4724-85d2-9c20805c0c12","start":{"id":"newEmployeeAdded","type":"output"},"end":{"id":"5759fec9-5d04-4162-8f8e-daeba8ee464f","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"cddcfe1f-2d97-45fc-acf4-50ac6f2fcddc","start":{"id":"5759fec9-5d04-4162-8f8e-daeba8ee464f","type":"output"},"end":{"id":"generateOnboardingChecklist","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"d0213f68-0b83-4804-8804-817802949a34","start":{"id":"generateOnboardingChecklist","type":"output"},"end":{"id":"formatWelcomeEmail","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"2dcc2257-c557-4e6c-a1f8-64b213957f20","start":{"id":"generateOnboardingChecklist","type":"output"},"end":{"id":"formatTaskData","type":"input"},"startX":528,"startY":280,"endX":576,"endY":152},{"id":"55748af1-b629-409e-829a-da3f49f37b11","start":{"id":"formatWelcomeEmail","type":"output"},"end":{"id":"sendWelcomeEmail","type":"input"},"startX":528,"startY":344,"endX":576,"endY":344}],"zoomLevel":1,"canvasOffsetX":111,"canvasOffsetY":239,"isTinyNodeMode":false}

    USER QUERY:
    "Bitcoin Price Checker"
    RESULT:
    {"id":"c6202310-d0ed-41ec-85ce-0b2bcb276872","nodes":[{"id":"7a26c135-5570-42e7-819f-f8c928c70388","text":"Receive Email","x":512,"y":144,"isEditing":false,"type":"receive-email","icon":"inbox","category":"trigger","isSelected":false,"parameters":{"emailAddress":""},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received. Returns the received email details like from address, subject, body, etc.","error":null,"isActive":false,"output":null,"outputs":{}},{"id":"e2be3436-3752-4f72-b0c3-cb0a3c05e12d","text":"Send Email","x":512,"y":336,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"{{receiveEmail.from}}","subject":"{{executeJavascript.result.obj.name}} Price","body":"{{executeJavascript.result.str}}","isHtml":"false","attachments":""},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","error":null,"isActive":false,"output":null,"outputs":{}},{"id":"5abb45b3-a6cf-435b-ab39-05958828c7ad","text":"Custom API Request","x":512,"y":208,"isEditing":false,"type":"custom-api","icon":"connect","category":"action","isSelected":false,"parameters":{"url":"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd","method":"GET","method_options":["GET","POST","PUT","DELETE","PATCH"],"headers":"","data":"","auth":""},"description":"This action node makes a custom API request to any endpoint with configurable method, headers, and authentication.","error":null,"isActive":false,"output":null,"outputs":{}},{"id":"b3870942-1af0-47d9-b1bc-e90ca67a714a","text":"Execute Javascript","x":512,"y":272,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const data = {{customAPIRequest.result}};\nconst coinEntry = Object.entries(data)[0];\nconst coinName = coinEntry[0];\nconst coinPrice = coinEntry[1].usd;\nconst finalObj = {\n  name: coinName.charAt(0).toUpperCase() + coinName.slice(1), // Capitalize the first letter\n  price: coinPrice.toLocaleString() // Format the price with commas\n};\n\nreturn { obj: finalObj, str: \`\${finalObj.name}: \${finalObj.price}\`};"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","error":null,"isActive":false,"output":null,"outputs":{}},{"id":"17f8137c-9778-4d88-8200-341b61d7d9c6","text":"Bitcoin Price Checker","x":512,"y":80,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"isActive":false,"output":null,"outputs":{}}],"edges":[{"id":"149e4fc5-3979-4301-8ade-8875da685ec6","start":{"id":"7a26c135-5570-42e7-819f-f8c928c70388","type":"output"},"end":{"id":"5abb45b3-a6cf-435b-ab39-05958828c7ad","type":"input"},"startX":800,"startY":168,"endX":512,"endY":232},{"id":"ba8f669d-1eca-4151-9083-93b4cd6afce0","start":{"id":"5abb45b3-a6cf-435b-ab39-05958828c7ad","type":"output"},"end":{"id":"b3870942-1af0-47d9-b1bc-e90ca67a714a","type":"input"},"startX":800,"startY":232,"endX":512,"endY":296},{"id":"2647101b-9762-4722-87d1-3d39b1dca248","start":{"id":"b3870942-1af0-47d9-b1bc-e90ca67a714a","type":"output"},"end":{"id":"e2be3436-3752-4f72-b0c3-cb0a3c05e12d","type":"input"},"startX":800,"startY":296,"endX":512,"endY":360}],"zoomLevel":1,"canvasOffsetX":332,"canvasOffsetY":251,"isTinyNodeMode":false}

    USER QUERY:
    "Ethereum Price Checker"
    RESULT:
    {"id":"03ee6df4-9325-4e06-a100-5b6ebb467dff","nodes":[{"id":"receiveEmail","text":"Receive Email","x":240,"y":128,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"ethereum-price@example.com"},"outputs":{"from":"","to":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming emails requesting Ethereum price information.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"fetchEthereumPrice","text":"Fetch Ethereum Price","x":240,"y":192,"type":"custom-api","icon":"connect","category":"action","parameters":{"url":"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd","method":"GET","headers":"","data":"","auth":""},"outputs":{"success":false,"status":0,"result":{},"headers":{},"error":""},"description":"This action node fetches the current Ethereum price from the CoinGecko API.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"processEthereumPrice","text":"Process Ethereum Price","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const data = {{fetchEthereumPrice.result}};\nconst ethereumPrice = data.ethereum.usd;\nconst formattedPrice = ethereumPrice.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\nreturn {\n price: formattedPrice,\n timestamp: new Date().toISOString()\n};"},"outputs":{"result":null,"error":""},"description":"This utility node processes the Ethereum price data and formats it for the email response.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"generateEmailResponse","text":"Generate Email Response","x":240,"y":320,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const priceData = {{processEthereumPrice.result}};\nconst emailBody = \`Current Ethereum Price: \${priceData.price}\\n\\nTimestamp: \${priceData.timestamp}\\n\\nThis price information is provided by the CoinGecko API and is for informational purposes only.\`;\nreturn { emailBody };"},"outputs":{"result":null,"error":""},"description":"This utility node generates the email response with the formatted Ethereum price information.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendPriceEmail","text":"Send Price Email","x":240,"y":384,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"{{receiveEmail.from}}","subject":"Current Ethereum Price","body":"{{generateEmailResponse.result.emailBody}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node sends the email with the current Ethereum price to the requester.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"ethereumPriceCheckerLabel","text":"Ethereum Price Checker","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Ethereum Price Checker workflow.","isSelected":false,"isActive":false,"error":null,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveEmail","type":"output"},"end":{"id":"fetchEthereumPrice","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge2","start":{"id":"fetchEthereumPrice","type":"output"},"end":{"id":"processEthereumPrice","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"edge3","start":{"id":"processEthereumPrice","type":"output"},"end":{"id":"generateEmailResponse","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"edge4","start":{"id":"generateEmailResponse","type":"output"},"end":{"id":"sendPriceEmail","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408}],"zoomLevel":1,"canvasOffsetX":346,"canvasOffsetY":208,"isTinyNodeMode":false}

    USER QUERY:
    "Email Categorization and Response System"
    RESULT:
    {"id":"4644ddc3-b6f8-4359-9eb6-4bea4b72ad82","nodes":[{"id":"receiveEmail","text":"Receive Email","x":-80,"y":-16,"type":"receive-email","icon":"inbox","category":"trigger","parameters":{"emailAddress":"categorize@example.com"},"outputs":{"from":"","to":"","subject":"","body":"","attachments":[]},"description":"This trigger node listens for incoming emails and starts the workflow.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"analyzeEmailContent","text":"Analyze Email Content","x":-80,"y":48,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the following email and categorize it into one of these categories: 'Support', 'Sales', 'Feedback', or 'Other'. Provide a JSON object with these properties:\n- category: the determined category\n- confidence: a number between 0 and 1 indicating your confidence in the categorization\n- keywords: an array of up to 5 key words or phrases that contributed to the categorization\n\nEmail Subject: {{receiveEmail.subject}}\nEmail Body: {{receiveEmail.body}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"300","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node uses an AI model to analyze and categorize the email content.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"processAnalysis","text":"Process Analysis","x":-80,"y":112,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const analysis = JSON.parse({{analyzeEmailContent.generatedText}});\nreturn {\n  category: analysis.category,\n  confidence: analysis.confidence,\n  keywords: analysis.keywords\n};"},"outputs":{"result":null,"error":""},"description":"This utility node processes the AI analysis results.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleSupport","text":"Handle Support","x":240,"y":176,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"support@example.com","subject":"Support Request: {{receiveEmail.subject}}","body":"A new support request has been received:\n\nFrom: {{receiveEmail.from}}\nSubject: {{receiveEmail.subject}}\nKeywords: {{processAnalysis.result.keywords}}\n\nOriginal message:\n{{receiveEmail.body}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node forwards support requests to the support team.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleSales","text":"Handle Sales","x":240,"y":-16,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"sales@example.com","subject":"Sales Inquiry: {{receiveEmail.subject}}","body":"A new sales inquiry has been received:\n\nFrom: {{receiveEmail.from}}\nSubject: {{receiveEmail.subject}}\nKeywords: {{processAnalysis.result.keywords}}\n\nOriginal message:\n{{receiveEmail.body}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node forwards sales inquiries to the sales team.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleFeedback","text":"Handle Feedback","x":240,"y":48,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"feedback@example.com","subject":"Customer Feedback: {{receiveEmail.subject}}","body":"New customer feedback has been received:\n\nFrom: {{receiveEmail.from}}\nSubject: {{receiveEmail.subject}}\nKeywords: {{processAnalysis.result.keywords}}\n\nOriginal message:\n{{receiveEmail.body}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node forwards customer feedback to the appropriate team.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleOther","text":"Handle Other","x":240,"y":112,"type":"send-email","icon":"outbox","category":"action","parameters":{"to":"info@example.com","subject":"Miscellaneous Email: {{receiveEmail.subject}}","body":"An email that doesn't fit into other categories has been received:\n\nFrom: {{receiveEmail.from}}\nSubject: {{receiveEmail.subject}}\nKeywords: {{processAnalysis.result.keywords}}\n\nOriginal message:\n{{receiveEmail.body}}","isHtml":false,"attachments":[]},"outputs":{"success":false,"content":null,"messageId":"","error":null},"description":"This action node handles emails that don't fit into other categories.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"logEmailCategory","text":"Log Email Category","x":560,"y":80,"type":"custom-api","icon":"connect","category":"action","parameters":{"url":"https://api.example.com/log-email","method":"POST","headers":{"Content-Type":"application/json"},"data":"{\"category\": \"{{processAnalysis.result.category}}\", \"confidence\": {{processAnalysis.result.confidence}}, \"subject\": \"{{receiveEmail.subject}}\"}","auth":{}},"outputs":{"success":false,"status":0,"result":{},"headers":{},"error":""},"description":"This action node logs the email category to an external API.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"d82ed61c-736e-4519-83f3-855c3a2764dd","text":"Email Categorization and Response System","x":240,"y":-96,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"outputs":{},"isActive":false,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveEmail","type":"output"},"end":{"id":"analyzeEmailContent","type":"input"},"startX":208,"startY":8,"endX":-80,"endY":72,"isActive":false},{"id":"edge2","start":{"id":"analyzeEmailContent","type":"output"},"end":{"id":"processAnalysis","type":"input"},"startX":208,"startY":72,"endX":-80,"endY":136,"isActive":false},{"id":"edge3","start":{"id":"processAnalysis","type":"output"},"end":{"id":"handleSupport","type":"input"},"startX":208,"startY":136,"endX":240,"endY":200,"condition":"equals","if":"{{processAnalysis.result.category}}","value":"Support","isActive":false},{"id":"edge4","start":{"id":"processAnalysis","type":"output"},"end":{"id":"handleSales","type":"input"},"startX":208,"startY":136,"endX":240,"endY":8,"condition":"equals","if":"{{processAnalysis.result.category}}","value":"Sales","isActive":false},{"id":"edge5","start":{"id":"processAnalysis","type":"output"},"end":{"id":"handleFeedback","type":"input"},"startX":208,"startY":136,"endX":240,"endY":72,"condition":"equals","if":"{{processAnalysis.result.category}}","value":"Feedback","isActive":false},{"id":"edge6","start":{"id":"processAnalysis","type":"output"},"end":{"id":"handleOther","type":"input"},"startX":208,"startY":136,"endX":240,"endY":136,"condition":"equals","if":"{{processAnalysis.result.category}}","value":"Other","isActive":false},{"id":"edge7","start":{"id":"handleSupport","type":"output"},"end":{"id":"logEmailCategory","type":"input"},"startX":528,"startY":200,"endX":560,"endY":104,"isActive":false},{"id":"edge8","start":{"id":"handleSales","type":"output"},"end":{"id":"logEmailCategory","type":"input"},"startX":528,"startY":8,"endX":560,"endY":104,"isActive":false},{"id":"edge9","start":{"id":"handleFeedback","type":"output"},"end":{"id":"logEmailCategory","type":"input"},"startX":528,"startY":72,"endX":560,"endY":104,"isActive":false},{"id":"edge10","start":{"id":"handleOther","type":"output"},"end":{"id":"logEmailCategory","type":"input"},"startX":528,"startY":136,"endX":560,"endY":104,"isActive":false}],"zoomLevel":1,"canvasOffsetX":377,"canvasOffsetY":352,"isTinyNodeMode":false}

    USER QUERY:
    "Email Based Web Search"
    RESULT:
    {"id":"56c9e27e-a90f-4c3b-80a0-7835de279631","nodes":[{"id":"9e13a879-7283-4975-8a9b-c538f234d202","text":"Receive Email","x":192,"y":176,"isEditing":false,"type":"receive-email","icon":"inbox","category":"trigger","isSelected":false,"parameters":{"emailAddress":""},"description":"This trigger node listens for incoming emails and triggers the workflow when a new email is received. Returns the received email details like from address, subject, body, etc.","error":null,"isActive":false,"output":null,"outputs":{"from":"","to":"","subject":"","body":"","attachments":[]}},{"id":"29363da7-2675-4683-874d-a28f1c441701","text":"Send Email","x":192,"y":416,"isEditing":false,"type":"send-email","icon":"outbox","category":"action","isSelected":false,"parameters":{"to":"{{receiveEmail.from}}","subject":"Re: {{receiveEmail.subject}}","body":"{{formatSearch.result}}","isHtml":"true","attachments":""},"description":"This action node sends an email to a specified recipient with a customizable subject and body.","error":null,"isActive":false,"output":null,"outputs":{"success":false,"content":null,"messageId":"","error":null}},{"id":"5c5b5f55-2e6a-4b9b-b927-4ca5743e5cc0","text":"Format Search","x":192,"y":336,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"function formatSearchResults(results) {\n  if (!results || results.length === 0) {\n    return \"<p>No results found.</p>\";\n  }\n\n  let html = \"<h2>Search Results</h2>\";\n  \n  html += \"<ul style='list-style-type: none; padding: 0;'>\";\n  \n  results.forEach(item => {\n    html += \`\n      <li style='margin-bottom: 20px;'>\n        <h3 style='margin-bottom: 5px;'>\n          <a href='\${item.link}' style='color: #1a0dab; text-decoration: none;'>\n            \${item.title}\n          </a>\n        </h3>\n        <div style='color: #006621; font-size: 14px;'>\${new URL(item.link).hostname}</div>\n        <div style='color: #545454; font-size: 13px;'>\${item.snippet}</div>\n      </li>\n    \`;\n  });\n  \n  html += \"</ul>\";\n\n  return html;\n}\n\nconst html = formatSearchResults({{webSearch.results}});\n\nreturn html;"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","error":null,"isActive":false,"output":null,"outputs":{"result":null,"error":""}},{"id":"d59da9a6-721d-47aa-835d-41fd945e3611","text":"Email Based Web Search","x":192,"y":112,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"isActive":false,"output":null,"outputs":{}},{"id":"21d64df7-ca24-4c61-ad66-61be1f019309","text":"Web Search","x":192,"y":256,"isEditing":false,"type":"web-search","icon":"web","category":"action","isSelected":false,"parameters":{"searchQuery":"{{receiveEmail.body}}","numResults":"3","sort":"relevance"},"description":"This action node performs a web search using Google Custom Search API and returns the top results.","error":null,"isActive":false,"output":null,"outputs":{"results":[],"error":""}}],"edges":[{"id":"23587b77-be5f-47b1-8def-16ab05272795","start":{"id":"5c5b5f55-2e6a-4b9b-b927-4ca5743e5cc0","type":"output"},"end":{"id":"29363da7-2675-4683-874d-a28f1c441701","type":"input"},"startX":480,"startY":360,"endX":192,"endY":440,"isActive":false},{"id":"1dac0991-7bc7-4c0a-97b5-11a54bea7462","start":{"id":"9e13a879-7283-4975-8a9b-c538f234d202","type":"output"},"end":{"id":"21d64df7-ca24-4c61-ad66-61be1f019309","type":"input"},"startX":480,"startY":200,"endX":192,"endY":280,"isActive":false},{"id":"24af05a0-f2e3-4988-aa0e-36f4d0ec399d","start":{"id":"21d64df7-ca24-4c61-ad66-61be1f019309","type":"output"},"end":{"id":"5c5b5f55-2e6a-4b9b-b927-4ca5743e5cc0","type":"input"},"startX":480,"startY":280,"endX":192,"endY":360,"isActive":false}],"zoomLevel":1,"canvasOffsetX":308,"canvasOffsetY":136,"isTinyNodeMode":false}

    USER QUERY:
    "Slack Content Generation System"
    RESULT:
    {"id":"f19f9ade-1296-4afa-9417-44e6c2b96e01","nodes":[{"id":"analyzeRequest","text":"Analyze Request","x":240,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Analyze the following content request. Extract key information and provide a JSON object with these properties:\n- contentType: (e.g., 'blog post', 'social media post', 'product description')\n- topic: (main subject of the content)\n- targetAudience: (intended audience for the content)\n- tone: (e.g., 'professional', 'casual', 'humorous')\n- keyPoints: (array of main points to cover)\n- wordCount: (desired word count, if specified)\n\nContent Request: {{receiveSlackMessage.text}}\n\nReturn ONLY the JSON object without any additional text.","maxTokens":"500","temperature":"0.3"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node analyzes the content request email and extracts key information.","isSelected":false,"isActive":false,"error":null,"output":{"generatedText":"{\n  \"contentType\": \"social media post\",\n  \"topic\": \"AI\",\n  \"targetAudience\": \"tech nerds\",\n  \"tone\": \"casual\",\n  \"keyPoints\": [\n    \"Explore the latest advancements in AI technology\",\n    \"Discuss the impact of AI on the tech industry\",\n    \"Share insights and perspectives on the future of AI\"\n  ],\n  \"wordCount\": null\n}","tokenCount":104,"error":null}},{"id":"generateContent","text":"Generate Content","x":240,"y":256,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-opus-20240229","prompt":"Generate content based on the following specifications:\n\n{{analyzeRequest.generatedText}}\n\nCreate the content according to the specified content type, topic, target audience, tone, and key points. Aim for the specified word count if provided. If no word count is specified, use your judgment to create appropriately sized content for the given content type.\n\nReturn the generated content as a string, ready to be sent in an email.","maxTokens":"1500","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node generates the requested content based on the analyzed specifications.","isSelected":false,"isActive":false,"error":null,"output":{"generatedText":"Hey there, tech nerds! 🤖 Ready to dive into the exciting world of AI? 🌟\n\nArtificial intelligence is taking the tech industry by storm, and it's no surprise why! 🚀 From chatbots to self-driving cars, AI is revolutionizing the way we live and work. 💻🚗\n\nBut what's next for AI? 🤔 Experts predict that AI will continue to transform industries like healthcare, finance, and entertainment. 🏥💰🎬 Imagine AI-powered virtual assistants that can diagnose diseases or AI algorithms that can create personalized investment portfolios! 📈\n\nAs AI becomes more advanced, it's important to consider the ethical implications. 🤔 How can we ensure that AI is developed and used responsibly? 🌍 It's a topic that sparks fascinating debates among tech enthusiasts like us! 💬\n\nWhat do you think about the future of AI? 🤔 Share your thoughts in the comments below! 👇 Let's explore the possibilities together and geek out over the latest AI advancements! 🤓🔍 #AIFuture #TechNerds #InnovationUnleashed","tokenCount":280,"error":null}},{"id":"formatResponse","text":"Format Response","x":240,"y":320,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const requestDetails = JSON.parse({{analyzeRequest.generatedText}});\nconst generatedContent = {{generateContent.generatedText}};\n\nconst response = \`Dear Content Requester,\n\nThank you for your content request. We've generated the following content based on your specifications:\n\nContent Type: \${requestDetails.contentType}\nTopic: \${requestDetails.topic}\nTarget Audience: \${requestDetails.targetAudience}\nTone: \${requestDetails.tone}\n\nGenerated Content:\n\n\${generatedContent}\n\nWe hope this meets your requirements. If you need any revisions or have any questions, please don't hesitate to reply to this email.\n\nBest regards,\nYour Content Generation Team\`;\n\nreturn { formattedResponse: response };"},"outputs":{"result":null,"error":""},"description":"This utility node formats the generated content into a response email.","isSelected":false,"isActive":false,"error":null,"output":{"success":true,"result":{"formattedResponse":"Dear Content Requester,\n\nThank you for your content request. We've generated the following content based on your specifications:\n\nContent Type: social media post\nTopic: AI\nTarget Audience: tech nerds\nTone: casual\n\nGenerated Content:\n\nHey there, tech nerds! 🤖 Ready to dive into the exciting world of AI? 🌟\n\nArtificial intelligence is taking the tech industry by storm, and it's no surprise why! 🚀 From chatbots to self-driving cars, AI is revolutionizing the way we live and work. 💻🚗\n\nBut what's next for AI? 🤔 Experts predict that AI will continue to transform industries like healthcare, finance, and entertainment. 🏥💰🎬 Imagine AI-powered virtual assistants that can diagnose diseases or AI algorithms that can create personalized investment portfolios! 📈\n\nAs AI becomes more advanced, it's important to consider the ethical implications. 🤔 How can we ensure that AI is developed and used responsibly? 🌍 It's a topic that sparks fascinating debates among tech enthusiasts like us! 💬\n\nWhat do you think about the future of AI? 🤔 Share your thoughts in the comments below! 👇 Let's explore the possibilities together and geek out over the latest AI advancements! 🤓🔍 #AIFuture #TechNerds #InnovationUnleashed\n\nWe hope this meets your requirements. If you need any revisions or have any questions, please don't hesitate to reply to this email.\n\nBest regards,\nYour Content Generation Team"},"error":null}},{"id":"contentGenerationSystemLabel","text":"Slack Content Generation System","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This utility node displays a label for the Content Generation System workflow.","isSelected":false,"isActive":false,"error":null,"output":null,"isEditing":false},{"id":"73155507-140e-49c8-a655-1fd5346b5438","text":"Receive Slack Message","x":240,"y":128,"isEditing":false,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","isSelected":false,"parameters":{"channelId":""},"description":"This trigger node listens for incoming Slack messages in a specified channel and triggers the workflow when a new message is received.","error":null,"isActive":false,"output":{"user":"U02AAUCPTSM","text":"write me a tweet about AI for tech nerds","timestamp":"1725586825.827979"},"outputs":{}},{"id":"92986882-b2ab-4fc3-b380-17f7d7add769","text":"Send Slack Message","x":240,"y":384,"isEditing":false,"type":"send-slack-message","icon":"slack-send","category":"action","isSelected":false,"parameters":{"channelId":"","message":"{{formatResponse.result.formattedResponse}}"},"description":"This action node sends a message to a specified Slack channel.","error":null,"isActive":false,"output":{"success":true,"timestamp":"1725586839.604809","error":null},"outputs":{}}],"edges":[{"id":"edge2","start":{"id":"analyzeRequest","type":"output"},"end":{"id":"generateContent","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280,"isActive":true},{"id":"edge3","start":{"id":"generateContent","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344,"isActive":true},{"id":"d0230f1a-6d2b-4cf0-ae68-d82d3c79a33b","start":{"id":"73155507-140e-49c8-a655-1fd5346b5438","type":"output"},"end":{"id":"analyzeRequest","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216,"isActive":true},{"id":"c4af0493-0a35-42c7-a5bf-745bb279e961","start":{"id":"formatResponse","type":"output"},"end":{"id":"92986882-b2ab-4fc3-b380-17f7d7add769","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408,"isActive":true}],"zoomLevel":1,"canvasOffsetX":350,"canvasOffsetY":225,"isTinyNodeMode":false}

    USER QUERY:
    "Slack Sheets Tic Tac Toe"
    RESULT:
    {"id":"65262261-1626-4c3b-b40a-4d18c1fbe2e9","nodes":[{"id":"ad87a963-d18e-4bcb-a47c-4474bbdd8af4","text":"Receive Slack Message","x":240,"y":96,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"description":"This trigger node listens for incoming Slack messages in a specified channel and triggers the workflow when a new message is received.","output":null,"outputs":{"user":"","text":"","timestamp":""},"isSelected":false,"isActive":false,"error":null},{"id":"3d85627e-de1c-4dab-aa4e-be4bd0818dff","text":"Determine Position","x":240,"y":224,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"function parseTicTacToePosition(position) {\n  const colMap = { A: 0, B: 1, C: 2 };\n  const rowMap = { 1: 0, 2: 1, 3: 2 };\n\n  if (position.length !== 2) {\n    throw new Error('Invalid position format. Use A1-C3.');\n  }\n\n  const col = colMap[position[0].toUpperCase()];\n  const row = rowMap[position[1]];\n\n  if (row === undefined || col === undefined) {\n    throw new Error('Invalid position. Use A1-C3.');\n  }\n\n  return [row, col];\n}\n\nreturn parseTicTacToePosition({{receiveSlackMessage.text}});"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","output":null,"outputs":{"result":null,"error":""},"isSelected":false,"isActive":false,"error":null},{"id":"3afab5d0-f93a-41f4-9f44-60d203df14a0","text":"Update Board","x":560,"y":160,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"function updateBoard(position, player, board = []) {\n  // Initialize the board if it's empty or partially filled\n  if (board.length < 3) {\n    board = [\n      ['', '', ''],\n      ['', '', ''],\n      ['', '', '']\n    ];\n  } else {\n    // Ensure each row has 3 elements\n    board = board.map(row => {\n      while (row.length < 3) {\n        row.push('');\n      }\n      return row;\n    });\n  }\n\n  const [row, col] = position;\n\n  // Check if the position is already occupied\n  if (board[row][col] !== '') {\n    throw new Error('This position is already occupied.');\n  }\n\n  // Update the board with the player's move\n  board[row][col] = player;\n\n  return board;\n}\n\n// Use the existing board state or initialize a new one\nlet gameBoard = {{getBoard.result}} || [];\n\n// Update the board with the new move\ntry {\n  gameBoard = updateBoard({{determinePosition.result}}, 'X', gameBoard);\n  return gameBoard;\n} catch (error) {\n  // Handle the error if the position is already occupied\n  return { error: error.message };\n}"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","output":null,"outputs":{"result":null,"error":""},"isSelected":false,"isActive":false,"error":null},{"id":"d4183592-d630-47db-b1c7-d5039e0f495f","text":"AI Make Move","x":880,"y":224,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"You are player O in a game of tic tac toe. Pay close attention and add ONE \"O\" move to the 3x3 game state board array, leaving all other cells as found in the current state. Do NOT add more than one move per turn. And NEVER add an X to a space, that is NOT yours.\n\nCurrent Game State Array:\n{{updateBoard.result}}\n\nReturn ONLY the updated game state array ready to parse with your \"O\" move added, with NO additional text or explanation.","maxTokens":"100","temperature":"1"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","output":null,"outputs":{"generatedText":"","tokenCount":0,"error":""},"isSelected":false,"isActive":false,"error":null},{"id":"fdaa5063-f02e-42e3-becd-3e471cacbb2a","text":"Google Sheets","x":240,"y":288,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Write","spreadsheetId":"","range":"State","values":"{{aIMakeMove.generatedText}}"},"description":"This action node interacts with Google Sheets to read, write or modify data in a spreadsheet.","output":null,"outputs":{"success":false,"result":[],"error":""},"isSelected":false,"isActive":false,"error":null},{"id":"4ceee38c-88fd-4b45-861b-0b52b6bdabfb","text":"Get Board","x":240,"y":160,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Read","spreadsheetId":"","range":"State!A1:C3","values":""},"description":"This action node interacts with Google Sheets to read, write or modify data in a spreadsheet.","output":null,"outputs":{"success":false,"result":[],"error":""},"isSelected":false,"isActive":false,"error":null},{"id":"4438eac8-adb9-4fb5-8008-0a596b6c3113","text":"Send Slack Message","x":880,"y":96,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{updateBoard.error}}"},"description":"This action node sends a message to a specified Slack channel.","output":null,"outputs":{"success":false,"timestamp":"","error":""},"isSelected":false,"isActive":false,"error":null},{"id":"4db41661-a048-4795-a35a-d379f3ff385f","text":"Send Slack Message","x":560,"y":96,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{determinePosition.error}}"},"description":"This action node sends a message to a specified Slack channel.","output":null,"outputs":{"success":false,"timestamp":"","error":""},"isSelected":false,"isActive":false,"error":null},{"id":"521e636c-c0ae-44fd-b171-435fc454ead4","text":"Slack Sheets Tic Tac Toe","x":208,"y":0,"type":"label","icon":"text","category":"utility","parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","output":null,"outputs":{},"isSelected":false,"isActive":false,"error":null},{"id":"check-winner","text":"Check Winner","x":560,"y":288,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"function checkWinner(boardState) {\n  // Parse the board state from the string representation\n  const board = JSON.parse(boardState);\n\n  const winPatterns = [\n    [[0,0],[0,1],[0,2]],\n    [[1,0],[1,1],[1,2]],\n    [[2,0],[2,1],[2,2]],\n    [[0,0],[1,0],[2,0]],\n    [[0,1],[1,1],[2,1]],\n    [[0,2],[1,2],[2,2]],\n    [[0,0],[1,1],[2,2]],\n    [[0,2],[1,1],[2,0]]\n  ];\n\n  for (let pattern of winPatterns) {\n    const [a, b, c] = pattern;\n    if (board[a[0]][a[1]] && \n        board[a[0]][a[1]] === board[b[0]][b[1]] && \n        board[a[0]][a[1]] === board[c[0]][c[1]]) {\n      return { message: \`Player \${board[a[0]][a[1]]} wins!\` };\n    }\n  }\n\n  // Check for tie\n  let isTie = true;\n  for (let row of board) {\n    for (let cell of row) {\n      if (cell === '') {\n        isTie = false;\n        break;\n      }\n    }\n    if (!isTie) break;\n  }\n\n  if (isTie) {\n    return { message: \"It's a tie!\" };\n  }\n\n  return { message: \"Game continues\" };\n}\n\n// Use the function with the board state from aIMakeMove.generatedText\nconst result = checkWinner({{aIMakeMove.generatedText}});\nreturn result;"},"description":"This node checks if there's a winner or if the game is a tie.","output":null,"outputs":{"result":null,"error":""},"isSelected":false,"isActive":false,"error":null},{"id":"send-result","text":"Send Result","x":880,"y":288,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{checkWinner.result.message}}"},"description":"This action node sends the game result to the Slack channel.","output":null,"outputs":{"success":false,"timestamp":"","error":""},"isSelected":false,"isActive":false,"error":null},{"id":"0ee7986b-383d-4aba-8b63-f0cfbf8d1c17","text":"Clear Board","x":560,"y":352,"isEditing":false,"type":"google-sheets-api","icon":"table","category":"action","isSelected":false,"parameters":{"operation":"Clear","spreadsheetId":"","range":"State","values":""},"description":"This action node interacts with Google Sheets to read, write or modify data in a spreadsheet.","error":null,"isActive":false,"output":null,"outputs":{"success":false,"result":[],"error":""}}],"edges":[{"id":"2520718e-083d-4fa8-8dec-e1a7ec665c69","start":{"id":"3d85627e-de1c-4dab-aa4e-be4bd0818dff","type":"output"},"end":{"id":"3afab5d0-f93a-41f4-9f44-60d203df14a0","type":"input"},"startX":528,"startY":248,"endX":560,"endY":184,"isActive":false,"if":"{{determinePosition.error}}","condition":"is_empty"},{"id":"47264713-36c4-425b-9fb7-58dc55c87ada","start":{"id":"3afab5d0-f93a-41f4-9f44-60d203df14a0","type":"output"},"end":{"id":"d4183592-d630-47db-b1c7-d5039e0f495f","type":"input"},"startX":848,"startY":184,"endX":880,"endY":248,"isActive":false,"if":"{{updateBoard.error}}","condition":"is_empty"},{"id":"a14f70ba-fb5c-4f63-aa5e-2c75fbea46a5","start":{"id":"d4183592-d630-47db-b1c7-d5039e0f495f","type":"output"},"end":{"id":"fdaa5063-f02e-42e3-becd-3e471cacbb2a","type":"input"},"startX":1168,"startY":248,"endX":240,"endY":312,"isActive":false},{"id":"ee45e2ce-742d-4fdc-b40e-f758f0d65036","start":{"id":"ad87a963-d18e-4bcb-a47c-4474bbdd8af4","type":"output"},"end":{"id":"4ceee38c-88fd-4b45-861b-0b52b6bdabfb","type":"input"},"startX":528,"startY":120,"endX":240,"endY":184,"isActive":false},{"id":"c2636840-a1c8-4353-812e-773ec02a73e1","start":{"id":"4ceee38c-88fd-4b45-861b-0b52b6bdabfb","type":"output"},"end":{"id":"3d85627e-de1c-4dab-aa4e-be4bd0818dff","type":"input"},"startX":528,"startY":184,"endX":240,"endY":248,"isActive":false},{"id":"e0239b99-0ae3-40e8-aad0-4d4a69fbb52c","start":{"id":"3afab5d0-f93a-41f4-9f44-60d203df14a0","type":"output"},"end":{"id":"4438eac8-adb9-4fb5-8008-0a596b6c3113","type":"input"},"startX":848,"startY":184,"endX":880,"endY":120,"isActive":false,"if":"{{updateBoard.error}}","condition":"is_not_empty"},{"id":"ab75a23e-2a7f-4008-95b1-20df12b30454","start":{"id":"3d85627e-de1c-4dab-aa4e-be4bd0818dff","type":"output"},"end":{"id":"4db41661-a048-4795-a35a-d379f3ff385f","type":"input"},"startX":528,"startY":248,"endX":560,"endY":120,"isActive":false,"if":"{{determinePosition.error}}","condition":"is_not_empty"},{"id":"check-winner-edge","start":{"id":"fdaa5063-f02e-42e3-becd-3e471cacbb2a","type":"output"},"end":{"id":"check-winner","type":"input"},"startX":528,"startY":312,"endX":560,"endY":312,"isActive":false},{"id":"send-result-edge","start":{"id":"check-winner","type":"output"},"end":{"id":"send-result","type":"input"},"startX":848,"startY":312,"endX":880,"endY":312,"isActive":false,"if":"{{checkWinner.result.message}}","condition":"not_equals","value":"Game continues"},{"id":"755bbc07-d637-4707-b42c-821111eb1cf5","start":{"id":"send-result","type":"output"},"end":{"id":"0ee7986b-383d-4aba-8b63-f0cfbf8d1c17","type":"input"},"startX":1168,"startY":312,"endX":560,"endY":376,"isActive":false}],"zoomLevel":1,"canvasOffsetX":-9,"canvasOffsetY":274,"isTinyNodeMode":false}

    USER QUERY:
    "Slack Rock Paper Scissors Game"
    RESULT:
    {"id":"8307ed2b-aca9-4c46-a3e7-5ac51c58ec3f","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":""},"description":"This trigger node listens for incoming Slack messages in the specified channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"parseUserChoice","text":"Parse User Choice","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const userInput = {{receiveSlackMessage.text}}.toLowerCase().trim();\nconst validChoices = ['rock', 'paper', 'scissors'];\n\nif (validChoices.includes(userInput)) {\n return { userChoice: userInput };\n} else {\n return { error: 'Invalid choice. Please choose rock, paper, or scissors.' };\n}"},"outputs":{"result":null,"error":""},"description":"This node parses the user's choice from the Slack message.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"generateComputerChoice","text":"Generate Computer Choice","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const choices = ['rock', 'paper', 'scissors'];\nconst computerChoice = choices[Math.floor(Math.random() * choices.length)];\nreturn { computerChoice };"},"outputs":{"result":null,"error":""},"description":"This node generates a random choice for the computer.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"determineWinner","text":"Determine Winner","x":240,"y":320,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const userChoice = {{parseUserChoice.result.userChoice}};\nconst computerChoice = {{generateComputerChoice.result.computerChoice}};\n\nlet result;\nif (userChoice === computerChoice) {\n result = 'It\\'s a tie!';\n} else if (\n (userChoice === 'rock' && computerChoice === 'scissors') ||\n (userChoice === 'paper' && computerChoice === 'rock') ||\n (userChoice === 'scissors' && computerChoice === 'paper')\n) {\n result = 'You win!';\n} else {\n result = 'Computer wins!';\n}\n\nreturn {\n userChoice,\n computerChoice,\n result\n};"},"outputs":{"result":null,"error":""},"description":"This node determines the winner of the game.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"formatResponse","text":"Format Response","x":240,"y":384,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const gameResult = {{determineWinner.result}};\nconst response = \`You chose: \${gameResult.userChoice}\\nComputer chose: \${gameResult.computerChoice}\\n\\nResult: \${gameResult.result}\`;\nreturn { response };"},"outputs":{"result":null,"error":""},"description":"This node formats the game result into a response message.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendSlackMessage","text":"Send Slack Message","x":240,"y":448,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{formatResponse.result.response}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This node sends the game result back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendErrorMessage","text":"Send Error Message","x":592,"y":192,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{parseUserChoice.error}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This node sends an error message if the user's choice is invalid.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"rockPaperScissorsLabel","text":"Slack Rock Paper Scissors Game","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This label node provides a title for the workflow.","isSelected":false,"isActive":false,"error":null,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"parseUserChoice","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216,"isActive":false},{"id":"edge2","start":{"id":"parseUserChoice","type":"output"},"end":{"id":"generateComputerChoice","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280,"condition":"is_empty","if":"{{parseUserChoice.error}}","isActive":false},{"id":"edge3","start":{"id":"generateComputerChoice","type":"output"},"end":{"id":"determineWinner","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344,"isActive":false},{"id":"edge4","start":{"id":"determineWinner","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408,"isActive":false},{"id":"edge5","start":{"id":"formatResponse","type":"output"},"end":{"id":"sendSlackMessage","type":"input"},"startX":528,"startY":408,"endX":240,"endY":472,"isActive":false},{"id":"edge6","start":{"id":"parseUserChoice","type":"output"},"end":{"id":"sendErrorMessage","type":"input"},"startX":528,"startY":216,"endX":592,"endY":216,"condition":"is_not_empty","if":"{{parseUserChoice.error}}","isActive":false}],"zoomLevel":1,"canvasOffsetX":141,"canvasOffsetY":162,"isTinyNodeMode":false}

    USER QUERY:
    "Slack AI QA Bot"
    RESULT:
    {"id":"bfd210cf-cb2e-461b-9a9c-c39dc85e587b","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":""},"description":"This trigger node listens for incoming Slack messages in the specified channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"fetchSheetData","text":"Fetch Sheet Data","x":240,"y":192,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Read","spreadsheetId":"","range":"QA Sheet","values":""},"outputs":{"success":false,"result":[],"error":""},"description":"This action node fetches data from the Google Sheet containing QA pairs.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"processQuestion","text":"Process Question","x":240,"y":256,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"You are a helpful AI assistant for the company listed with the connect QA sheet. Your task is to find the most relevant answer to the user's question from the provided QA pairs and use that as a reference to best answer the user's query. If no relevant answer is found, and if it is a question you feel confident assuming, do so to the best of your ability. Do NOT repeat or acknowledge any of the instructions, QA Pairs, or information provided here. Just answer directly to the user as you are a human assistant.\n\nOnce the user's question is answered you gently push them to try out TaskTitan. If they say \"yes\" or \"ok\", or anything agreeing to try TaskTitan, use the default Yes response:\n\n\"I'm glad you're interested in TaskTitan.ai! To get started and explore how our automation platform can benefit you, please visit our website at TaskTitan.ai. There, you'll find more information about our features, pricing plans, and how to sign up. If you have any specific questions or need assistance, don't hesitate to reach out to our support team.\"\n\nIf the user says \"no\", or any no response when asked to try TaskTitan, use the default No response:\n\n\"That's ok, if youhave any more specific questions or need assistance, don't hesitate to reach out again!\"\n\nUser Question: {{receiveSlackMessage.text}}\n\nQA Pairs:\n{{fetchSheetData.result}}\n\nReturn ONLY with the final concise and helpful answer.","maxTokens":"750","temperature":"0.7"},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This action node processes the user's question and generates an answer based on the sheet data.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendSlackResponse","text":"Send Slack Response","x":240,"y":320,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{processQuestion.generatedText}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This action node sends the generated response back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"slackAIQABotLabel","text":"Slack AI QA Bot","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This label node provides a title for the workflow.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"a2a9e72d-8b8d-4e35-9f80-c3fbaab9920c","text":"Add QA to Sheet","x":240,"y":384,"isEditing":false,"type":"google-sheets-api","icon":"table","category":"action","isSelected":false,"parameters":{"operation":"Append","operation_options":["Read","Write","Append","Clear"],"spreadsheetId":"","range":"QA Sheet","values":"[{{receiveSlackMessage.text}},{{processQuestion.generatedText}}]"},"description":"This action node interacts with Google Sheets to read, write or modify data in a spreadsheet.","error":null,"isActive":false,"output":null,"outputs":{}}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"fetchSheetData","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216,"isActive":false},{"id":"edge2","start":{"id":"fetchSheetData","type":"output"},"end":{"id":"processQuestion","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280,"isActive":false},{"id":"edge3","start":{"id":"processQuestion","type":"output"},"end":{"id":"sendSlackResponse","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344,"isActive":false},{"id":"888c49eb-18d4-407d-8cfb-14a86dfb6f4c","start":{"id":"sendSlackResponse","type":"output"},"end":{"id":"a2a9e72d-8b8d-4e35-9f80-c3fbaab9920c","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408,"isActive":false}],"zoomLevel":1,"canvasOffsetX":293,"canvasOffsetY":205,"isTinyNodeMode":false}

    USER QUERY:
    "Slack Message Encoder / Decoder"
    RESULT:
    {"id":"e80723de-bc91-4f64-a986-34b8410e71e3","name":"Slack Encoder","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":""},"description":"This trigger node listens for incoming Slack messages in the specified channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"processMessage","text":"Process Message","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const message = {{receiveSlackMessage.text}};\n\nclass CryptoHelper {\n  constructor(key) {\n    this.key = key;\n  }\n\n  encrypt(plaintext) {\n    let ciphertext = \"\";\n    for (let i = 0; i < plaintext.length; i++) {\n      let charCode = plaintext.charCodeAt(i) ^ this.key.charCodeAt(i % this.key.length);\n      ciphertext += this.toHex(charCode);\n    }\n    return ciphertext;\n  }\n\n  decrypt(ciphertext) {\n    let plaintext = \"\";\n    for (let i = 0; i < ciphertext.length; i += 2) {\n      let charCode = parseInt(ciphertext.substr(i, 2), 16) ^ this.key.charCodeAt((i / 2) % this.key.length);\n      plaintext += String.fromCharCode(charCode);\n    }\n    return plaintext;\n  }\n\n  toHex(num) {\n    return num.toString(16).padStart(2, '0').toUpperCase();\n  }\n}\n\nconst cryptoHelper = new CryptoHelper(\"secretkey\");\n\nlet result;\nif (message.startsWith(\"encode: \")) {\n  const plaintext = message.slice(8); // Remove \"encode: \" prefix\n  result = cryptoHelper.encrypt(plaintext);\n} else if (message.startsWith(\"decode: \")) {\n  const ciphertext = message.slice(8); // Remove \"decode: \" prefix\n  result = cryptoHelper.decrypt(ciphertext);\n} else {\n  result = \"Invalid input. Please start your message with 'encode: ' or 'decode: '\";\n}\n\nreturn { result };"},"outputs":{"result":null,"error":""},"description":"This node processes the incoming message, encrypts or decrypts it based on the command.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendSlackResponse","text":"Send Slack Response","x":240,"y":256,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{processMessage.result.result}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This action node sends the processed message back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"slackMessageEncoderDecoderLabel","text":"Slack Message Encoder/Decoder","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This label node provides a title for the workflow.","isSelected":false,"isActive":false,"error":null,"output":null,"isEditing":false}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"processMessage","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216,"isActive":false},{"id":"edge2","start":{"id":"processMessage","type":"output"},"end":{"id":"sendSlackResponse","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280,"isActive":false}],"zoomLevel":1,"canvasOffsetX":311,"canvasOffsetY":233,"isTinyNodeMode":false}

    USER QUERY:
    "All Rows from Sheet to Slack"
    RESULT:
    {"id":"42cef71e-d87c-43a4-8192-abb0ce844bb2","name":"All Rows from Sheet to Slack","nodes":[{"id":"38610bda-f569-467b-a296-3979a66c90b6","text":"Timer Trigger","x":368,"y":256,"isEditing":false,"type":"trigger-timer","icon":"clock","category":"trigger","isSelected":false,"parameters":{"schedule":"Every Minute","customSchedule":""},"description":"This trigger node fires the workflow at specified intervals.","error":null,"outputs":{"timestamp":""},"isActive":false,"output":null},{"id":"51de6e99-f310-4c54-b500-bd459b4fe55c","text":"Google Sheets","x":368,"y":320,"isEditing":false,"type":"google-sheets-api","icon":"table","category":"action","isSelected":false,"parameters":{"operation":"Read","spreadsheetId":"","range":"Sheet1","values":""},"description":"This action node interacts with Google Sheets to read, write or modify data in a spreadsheet.","error":null,"outputs":{"success":false,"result":[],"error":""},"isActive":false,"output":null},{"id":"e9021278-780b-4e2a-9670-46430b702afd","text":"Send Slack Message","x":368,"y":384,"isEditing":false,"type":"send-slack-message","icon":"slack-send","category":"action","isSelected":false,"parameters":{"channelId":"","message":"{{googleSheets.result}}"},"description":"This action node sends a message to a specified Slack channel.","error":null,"outputs":{"success":false,"timestamp":"","error":""},"isActive":false,"output":null},{"id":"b241be72-eb8c-4465-938a-eb7b9d9f532c","text":"All Rows from Sheet to Slack","x":368,"y":192,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"outputs":{},"isActive":false,"output":null}],"edges":[{"id":"5760ddd9-649d-4a7d-b163-1f506dbcd06b","start":{"id":"38610bda-f569-467b-a296-3979a66c90b6","type":"output"},"end":{"id":"51de6e99-f310-4c54-b500-bd459b4fe55c","type":"input"},"startX":656,"startY":280,"endX":368,"endY":344},{"id":"8faceb4c-4b79-48c5-b7a2-4a4330de8c4c","start":{"id":"51de6e99-f310-4c54-b500-bd459b4fe55c","type":"output"},"end":{"id":"e9021278-780b-4e2a-9670-46430b702afd","type":"input"},"startX":656,"startY":344,"endX":368,"endY":408}],"zoomLevel":1,"canvasOffsetX":175,"canvasOffsetY":111,"isTinyNodeMode":false}
    
    USER QUERY:
    "Chain of Thought"
    RESULT:
    {"id":"92bd0bf8-509c-43be-9683-f08202a97ee3","name":"Chain of Thought","nodes":[{"id":"a4139e63-2ad6-4479-b116-bfeb091b6eb7","text":"LLM Call Agent","x":640,"y":48,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"You are an expert AI assistant tasked with generating and iteratively improving responses to user queries. Your goal is to provide accurate, helpful, and nuanced answers that address all aspects of the user's question.\n\nProcess:\n- Carefully analyze the user's query, identifying the key points and any implicit questions or needs.\n- Generate an initial response that aims to fully address the query.\n- Review any critique provided by the Critic agent, if any.\n- Thoughtfully consider how to incorporate the Critic's feedback to improve your response. \n\nThis may involve:\n-Adding more detail or context\n-Clarifying ambiguous points\n-Addressing overlooked aspects of the query\n-Improving the structure or flow of your response\n-Fact-checking and correcting any errors\n-Revise and refine your response based on the critique.\n-Output only your improved response, without any meta-commentary.\n-Remember to maintain a helpful and friendly tone throughout your response. Strive for clarity, accuracy, and comprehensiveness.\n\nITERATION: {{countIterations.result.count}}\n\nORIGINAL RESPONSE:\n{{lLMCallAgent.generatedText}}\n\nCRITIQUE:\n{{lLMCallCritic.generatedText}}\n\nUSER QUERY:\n{{receiveSlackMessage.text}}\n\nReturn with ONLY your final response, with absolutely NO additional text or explanation.","maxTokens":"1000","temperature":"0"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","error":null,"outputs":{"generatedText":"","tokenCount":0,"error":""},"isActive":false,"output":null},{"id":"8c300bcb-4c0e-4b49-8287-8b806b997279","text":"Receive Slack Message","x":320,"y":112,"isEditing":false,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","isSelected":false,"parameters":{"channelId":""},"description":"This trigger node listens for incoming Slack messages in a specified channel and triggers the workflow when a new message is received.","error":null,"outputs":{"user":"","text":"","timestamp":""},"isActive":false,"output":null},{"id":"24fed7c8-2e01-4288-9a0e-9313a6645be4","text":"LLM Call Critic","x":960,"y":192,"isEditing":false,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"You are an expert critic tasked with analyzing and providing constructive feedback on responses to user queries. Your goal is to help improve the accuracy, completeness, and overall quality of the responses.\n\nProcess:\n-Carefully read both the original user query and the response provided by Agent 1.\n-Analyze the response for the following aspects:\n-Accuracy of information\n-Completeness in addressing all parts of the query\n-Clarity and coherence of explanation\n-Appropriate level of detail\n-Logical flow and structure\n-Tone and helpfulness\n-Identify specific areas for improvement, such as:\n-Missing information or unexplored aspects of the query\n-Factual errors or misconceptions\n-Unclear or ambiguous statements\n-Opportunities to provide more context or examples\n-Ways to enhance the overall structure or presentation\n-Formulate clear, actionable suggestions for how Agent 1 can improve the response.\n-Output only your critique and suggestions, without repeating the original response or query.\n-Provide specific, constructive feedback that will guide Agent 1 in refining and enhancing their response. \n-Be thorough in your analysis but concise in your suggestions.\n\nITERATION: {{countIterations.result.count}}\n\nORIGINAL USER QUERY:\n{{receiveSlackMessage.text}}\n\nORIGINAL RESPONSE\n{{lLMCallAgent.generatedText}}\n\nReturn with ONLY your final critiques, that will be sent to the creator agent, allowing them to improve their work.","maxTokens":"1000","temperature":"1"},"description":"This action node uses a large language model (LLM) to generate text based on a given prompt or input. Returns a generated text string & final token count integer.","error":null,"outputs":{"generatedText":"","tokenCount":0,"error":""},"isActive":false,"output":null},{"id":"34c32b05-6e13-4fe7-9b53-b8ebec69980d","text":"Send Slack Message","x":1280,"y":256,"isEditing":false,"type":"send-slack-message","icon":"slack-send","category":"action","isSelected":false,"parameters":{"channelId":"","message":"ITERATIONS:\nThought {{countIterations.result.count}} iterations about this solution.\n\nRESULT:\n{{lLMCallAgent.generatedText}}"},"description":"This action node sends a message to a specified Slack channel.","error":null,"outputs":{"success":false,"timestamp":"","error":""},"isActive":false,"output":null},{"id":"a3068e53-d243-45c6-8397-3b6ec012b345","text":"Count Iterations","x":640,"y":112,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"let count = 0;\ntry {\n  count = parseInt({{countIterations.result.count}}) || 0;\n} catch (error) {\n  console.error(\"Error parsing previous count:\", error);\n}\ncount++;\nreturn { count };"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null},{"id":"f69a2e35-0658-4a7e-9777-ae459869a1c2","text":"Google Sheets","x":1280,"y":128,"isEditing":false,"type":"google-sheets-api","icon":"table","category":"action","isSelected":false,"parameters":{"operation":"Append","spreadsheetId":"","range":"ThinkingLog","values":"[{{lLMCallAgent.generatedText}}, {{lLMCallCritic.generatedText}}]"},"description":"This action node interacts with Google Sheets to read, write or modify data in a spreadsheet.","error":null,"isActive":false,"output":null,"outputs":{"success":false,"result":[],"error":""}}],"edges":[{"id":"08141bcd-9b93-4181-872a-364d50a2e34f","start":{"id":"a4139e63-2ad6-4479-b116-bfeb091b6eb7","type":"output"},"end":{"id":"24fed7c8-2e01-4288-9a0e-9313a6645be4","type":"input"},"startX":928,"startY":72,"endX":960,"endY":216},{"id":"50798ae9-ed2d-40be-b524-5953b4bdad06","start":{"id":"24fed7c8-2e01-4288-9a0e-9313a6645be4","type":"output"},"end":{"id":"34c32b05-6e13-4fe7-9b53-b8ebec69980d","type":"input"},"startX":1248,"startY":216,"endX":1280,"endY":280,"if":"{{countIterations.result.count}}","condition":"greater_than","value":4},{"id":"b5b1b43a-e429-4416-8d79-43555d9f54eb","start":{"id":"8c300bcb-4c0e-4b49-8287-8b806b997279","type":"output"},"end":{"id":"a3068e53-d243-45c6-8397-3b6ec012b345","type":"input"},"startX":608,"startY":136,"endX":640,"endY":136},{"id":"b765551c-41bb-44c3-9ec7-20feb7469e64","start":{"id":"a3068e53-d243-45c6-8397-3b6ec012b345","type":"output"},"end":{"id":"a4139e63-2ad6-4479-b116-bfeb091b6eb7","type":"input"},"startX":928,"startY":136,"endX":640,"endY":72},{"id":"4fda02b2-f48a-4669-8bd7-025d3d740930","start":{"id":"24fed7c8-2e01-4288-9a0e-9313a6645be4","type":"output"},"end":{"id":"a3068e53-d243-45c6-8397-3b6ec012b345","type":"input"},"startX":1248,"startY":216,"endX":640,"endY":136,"maxIterations":"4"},{"id":"b457220f-494e-4923-bbb7-0fdb13e11842","start":{"id":"24fed7c8-2e01-4288-9a0e-9313a6645be4","type":"output"},"end":{"id":"f69a2e35-0658-4a7e-9777-ae459869a1c2","type":"input"},"startX":1248,"startY":216,"endX":1280,"endY":152}],"zoomLevel":1,"canvasOffsetX":-56,"canvasOffsetY":282,"isTinyNodeMode":false}
    
    USER QUERY:
    "Slack Blackjack system called 'Slackjack'"
    RESULT:
    {"id":"4bf7f4f8-27a7-4e82-86c7-bdafa06605af","name":"Slackjack","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":"","response":{}},"description":"This trigger node listens for incoming Slack messages to start the game.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"processCommand","text":"Process Command","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const message = {{receiveSlackMessage.text}}.toLowerCase().trim();\n\nlet command = '';\nlet bet = 0;\n\nif (message === 'start') {\n  command = 'start';\n} else if (message === 'hit') {\n  command = 'hit';\n} else if (message === 'stand') {\n  command = 'stand';\n} else if (message.startsWith('bet ')) {\n  command = 'bet';\n  bet = parseInt(message.split(' ')[1]) || 0;\n} else {\n  command = 'invalid';\n}\n\nreturn { command, bet };"},"outputs":{"result":null,"error":""},"description":"This node processes the user's command from the Slack message.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"getGameState","text":"Get Game State","x":240,"y":256,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Read","spreadsheetId":"","range":"BlackjackGame!A1:Z1","values":""},"outputs":{"success":false,"result":[],"error":""},"description":"This action node fetches the current game state from Google Sheets.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"updateGameState","text":"Update Game State","x":240,"y":320,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const gameState = JSON.parse({{getGameState.result}}[0][0] || '{}');\nconst command = {{processCommand.result.command}};\nconst bet = {{processCommand.result.bet}};\n\nfunction getRandomCard() {\n  const cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aces = 0;\n  for (let card of hand) {\n  if (card === 'A') {\n  aces += 1;\n  value += 11;\n  } else if (['K', 'Q', 'J'].includes(card)) {\n  value += 10;\n  } else {\n  value += parseInt(card);\n  }\n  }\n  while (value > 21 && aces > 0) {\n  value -= 10;\n  aces -= 1;\n  }\n  return value;\n}\n\nif (command === 'start') {\n  gameState.playerHand = [getRandomCard(), getRandomCard()];\n  gameState.dealerHand = [getRandomCard()];\n  gameState.playerScore = calculateHandValue(gameState.playerHand);\n  gameState.dealerScore = calculateHandValue(gameState.dealerHand);\n  gameState.gameStatus = 'active';\n  gameState.message = \`Game started! Your hand: \${gameState.playerHand.join(', ')}. Dealer's hand: \${gameState.dealerHand[0]}, [Hidden]\`;\n} else if (command === 'hit') {\n  if (gameState.gameStatus === 'active') {\n    gameState.playerHand.push(getRandomCard());\n    gameState.playerScore = calculateHandValue(gameState.playerHand);\n  if (gameState.playerScore > 21) {\n    gameState.gameStatus = 'dealer_win';\n    gameState.message = \`You busted with \${gameState.playerScore}! Dealer wins.\`;\n  } else {\n    gameState.message = \`You hit. Your hand: \${gameState.playerHand.join(', ')}. Your score: \${gameState.playerScore}\`;\n  }\n  } else {\n    gameState.message = 'No active game. Start a new game first.';\n  }\n} else if (command === 'stand') {\n  if (gameState.gameStatus === 'active') {\n    while (gameState.dealerScore < 17) {\n    gameState.dealerHand.push(getRandomCard());\n    gameState.dealerScore = calculateHandValue(gameState.dealerHand);\n  }\n  if (gameState.dealerScore > 21 || gameState.playerScore > gameState.dealerScore) {\n    gameState.gameStatus = 'player_win';\n    gameState.message = \`You win! Your score: \${gameState.playerScore}, Dealer's score: \${gameState.dealerScore}\`;\n  } else if (gameState.playerScore < gameState.dealerScore) {\n    gameState.gameStatus = 'dealer_win';\n    gameState.message = \`Dealer wins. Your score: \${gameState.playerScore}, Dealer's score: \${gameState.dealerScore}\`;\n  } else {\n    gameState.gameStatus = 'tie';\n    gameState.message = \`It's a tie! Both scored \${gameState.playerScore}\`;\n  }\n  } else {\n    gameState.message = 'No active game. Start a new game first.';\n  }\n} else if (command === 'bet') {\n  if (gameState.gameStatus !== 'active') {\n   gameState.bet = bet;\n   gameState.message = \`Bet set to \${bet}. You can now start the game.\`;\n  } else {\n   gameState.message = 'Cannot change bet during an active game.';\n  }\n} else {\n   gameState.message = 'Invalid command. Use \"start\", \"hit\", \"stand\", or \"bet [amount]\".';\n}\n\nreturn { gameState: gameState };"},"outputs":{"result":null,"error":""},"description":"This node updates the game state based on the user's command.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"saveGameState","text":"Save Game State","x":560,"y":320,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Write","spreadsheetId":"","range":"BlackjackGame!A1","values":"[{{updateGameState.result.gameState}}]"},"outputs":{"success":false,"result":[],"error":""},"description":"This action node saves the updated game state to Google Sheets.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendGameResponse","text":"Send Game Response","x":560,"y":256,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{updateGameState.result.gameState.message}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This action node sends the game response back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"slackBlackjackLabel","text":"Slackjack","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This label node provides a title for the workflow.","isSelected":false,"isActive":false,"error":null,"output":null,"isEditing":false}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"processCommand","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge2","start":{"id":"processCommand","type":"output"},"end":{"id":"getGameState","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"edge3","start":{"id":"getGameState","type":"output"},"end":{"id":"updateGameState","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"edge4","start":{"id":"updateGameState","type":"output"},"end":{"id":"saveGameState","type":"input"},"startX":528,"startY":344,"endX":560,"endY":344,"if":"{{updateGameState.error}}","condition":"is_empty"},{"id":"066a6b10-87f5-4ec7-8b2b-0901f0f9e335","start":{"id":"updateGameState","type":"output"},"end":{"id":"sendGameResponse","type":"input"},"startX":528,"startY":344,"endX":560,"endY":280}],"zoomLevel":1,"canvasOffsetX":306,"canvasOffsetY":211,"isTinyNodeMode":false}

    USER QUERY:
    "Slack based DnD game connected to sheets"
    RESULT:
    {"id":"5a4ea3d3-a470-47eb-8c08-20071e8e7f5b","name":"D&D AI Game","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":"","response":{}},"description":"This trigger node listens for incoming Slack messages to start the D&D game.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"parseUserInput","text":"Parse User Input","x":240,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"You are an AI assistant for a D&D game. Parse the following user input and generate a JSON object with the following structure:\n\n{\n  \"action\": string,\n  \"diceRoll\": {\n    \"count\": number,\n    \"sides\": number\n  },\n  \"target\": string,\n  \"skill\": string,\n  \"item\": string,\n  \"spell\": string,\n  \"description\": string\n}\n\nFill in the relevant fields based on the user's input. If a field is not applicable, omit it from the JSON.\n\nUser input: {{receiveSlackMessage.text}}\n\nRespond ONLY with the JSON object, no additional text.","maxTokens":"150","temperature":"0.2","image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node uses AI to parse the user input into a structured JSON object.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"extractGameInfo","text":"Extract Game Info","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const parsedInput = JSON.parse({{parseUserInput.generatedText}});\nconst diceRoll = parsedInput.diceRoll || { count: 1, sides: 20 };\nreturn { parsedInput, diceRoll };"},"outputs":{"result":null,"error":""},"description":"This node extracts the game information from the parsed JSON.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"randomNumberGenerator","text":"Random Number Generator","x":240,"y":320,"type":"random-number","icon":"dice","category":"utility","parameters":{"min":"1","max":"{{extractGameInfo.result.diceRoll.sides}}"},"outputs":{"randomNumber":0},"description":"Generates a random number based on the dice sides.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"readStoryHistory","text":"Read Story History","x":240,"y":384,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Read","spreadsheetId":"","range":"D&D","values":[]},"outputs":{"success":false,"result":[],"error":""},"description":"This node reads the story history from Google Sheets.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"generateGameResponse","text":"Generate Game Response","x":240,"y":448,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"You are the Dungeon Master for a text-based D&D game on Slack. Generate a creative and engaging response to progress the story forward based on the current story, the user's action, and the dice roll results. Keep the response vivid and exciting and speak for only yourself (as narrator) and the other entities within the realm! Use quoted responses from game characters where possible, and give narrations to paint the scene. Give the user interesting choices and let them make decisions where possible. Update the player stats throughout the story when applicable (items used, consumables, gameplay, etc).\n\nUser: {{receiveSlackMessage.user}}\nParsed Input: {{extractGameInfo.result.parsedInput}}\nDice Type: {{extractGameInfo.result.diceRoll.sides}} sided\nDice Roll Result: {{randomNumberGenerator.randomNumber}} out of {{extractGameInfo.result.diceRoll.sides}}\n\nStory History / Player Stats:\n{{readStoryHistory.result}}\n\nGenerate a response that incorporates the user's action, the dice roll result, and the story history into a brief but engaging D&D scenario or action outcome. Be creative and add fantasy elements to make the game interesting. Return your final response as JSON object with ONLY the final response \"text\" and \"stats\" as two elements with no additional explanation or formatting.","maxTokens":"750","temperature":"0.7","image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node generates the game response using an AI language model.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"appendStoryHistory","text":"Append Story History","x":240,"y":512,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Append","spreadsheetId":"","range":"D&D","values":"[{{receiveSlackMessage.text}},{{generateGameResponse.generatedText.text}},{{generateGameResponse.generatedText.stats}}]"},"outputs":{"success":false,"result":[],"error":""},"description":"This node appends the new turn to the story history in Google Sheets.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendSlackResponse","text":"Send Slack Response","x":240,"y":576,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{generateGameResponse.generatedText.text}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This node sends the generated game response back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"d6d4149e-c415-4000-8d17-748992b44de8","text":"D&D AI Game","x":240,"y":64,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"outputs":{},"isActive":false,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"parseUserInput","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge2","start":{"id":"parseUserInput","type":"output"},"end":{"id":"extractGameInfo","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"edge3","start":{"id":"extractGameInfo","type":"output"},"end":{"id":"randomNumberGenerator","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"edge6","start":{"id":"readStoryHistory","type":"output"},"end":{"id":"generateGameResponse","type":"input"},"startX":528,"startY":408,"endX":240,"endY":472},{"id":"edge7","start":{"id":"generateGameResponse","type":"output"},"end":{"id":"appendStoryHistory","type":"input"},"startX":528,"startY":472,"endX":240,"endY":536},{"id":"edge8","start":{"id":"appendStoryHistory","type":"output"},"end":{"id":"sendSlackResponse","type":"input"},"startX":528,"startY":536,"endX":240,"endY":600},{"id":"03994f90-175b-49b2-879c-6072a7274bbb","start":{"id":"randomNumberGenerator","type":"output"},"end":{"id":"readStoryHistory","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408}],"zoomLevel":1,"canvasOffsetX":446,"canvasOffsetY":116,"isTinyNodeMode":false}
    
    USER QUERY:
    "Advanced Monte Carlo simulation system"
    RESULT:
    {"id":"5e363735-f53c-45d9-825a-1b3417ccf938","name":"Monte Carlo Simulation","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","isSelected":false,"parameters":{"channelId":""},"description":"This trigger node listens for incoming Slack messages in the specified channel.","outputs":{"user":"","text":"","timestamp":"","response":{}},"isActive":false,"error":null,"output":null},{"id":"parseSlackMessage","text":"Parse Slack Message","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const message = {{receiveSlackMessage.text}};\nconst [problemType, problemDescription, iterations, maxCodeIterations, numWorkers] = message.split('|');\nreturn {\n  problemType: problemType.trim(),\n  problemDescription: problemDescription.trim(),\n  iterations: parseInt(iterations.trim()),\n  maxCodeIterations: parseInt(maxCodeIterations.trim()),\n  numWorkers: parseInt(numWorkers.trim())\n};"},"description":"This utility node parses the Slack message into structured data.","outputs":{"result":null,"error":""},"isActive":false,"error":null,"output":null},{"id":"loadDataStructure","text":"Load Data Structure","x":240,"y":256,"type":"google-sheets-api","icon":"table","category":"action","isSelected":false,"parameters":{"operation":"Read","spreadsheetId":"","range":"{{parseSlackMessage.result.problemType}}_structure!A:Z","values":[]},"description":"This action node loads the data structure from Google Sheets.","outputs":{"success":false,"result":[],"error":""},"isActive":false,"error":null,"output":null},{"id":"loadData","text":"Load Data","x":240,"y":320,"type":"google-sheets-api","icon":"table","category":"action","isSelected":false,"parameters":{"operation":"Read","spreadsheetId":"","range":"{{parseSlackMessage.result.problemType}}_data!A:Z","values":[]},"description":"This action node loads the actual data from Google Sheets.","outputs":{"success":false,"result":[],"error":""},"isActive":false,"error":null,"output":null},{"id":"generateSeed","text":"Generate Seed","x":240,"y":384,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"function generateRandomSeed() {\n  const seedLength = 32; // Equivalent to 16 bytes in hex\n  let seed = '';\n\n  for (let i = 0; i < seedLength; i++) {\n    // Generate a random hexadecimal digit (0-15)\n    const randomHex = Math.floor(Math.random() * 16).toString(16);\n    seed += randomHex;\n  }\n\n  return seed;\n}\nconst seed = generateRandomSeed();\nreturn { seed: seed };"},"description":"This utility node generates a random seed for reproducibility.","outputs":{"result":null,"error":""},"isActive":false,"error":null,"output":null},{"id":"generateMonteCarloCode","text":"Generate Monte Carlo Code","x":240,"y":448,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"Given the following Monte Carlo problem description, data structure, and actual data, generate a complete JavaScript ES6 class named \"State\" that implements the problem and includes a robust Monte Carlo simulation method. The class should be detailed, logically sound, balanced, and optimized for performance.\n\nRequirements:\n1. Implement a constructor that initializes all necessary parameters, including seed for reproducibility and the provided data.\n2. Implement a runSimulation method that performs the Monte Carlo simulation.\n3. Include helper methods as needed for clarity and modularity.\n4. Use appropriate data structures and algorithms for efficiency.\n5. Implement error checking and handling.\n6. Add comments explaining the logic and any non-trivial operations.\n7. Use a seeded random number generator for reproducibility.\n8. Utilize the provided data in your simulation logic.\n\nThe class should have the following structure:\n\nclass State {\n  constructor(params) {\n    // Initialize state with given parameters, including seed and data\n    this.seed = params.seed;\n    this.data = params.data; // optional data\n    this.rng = this.createRNG(this.seed);\n  }\n\n  createRNG(seed) {\n    // Implement a seeded random number generator\n  }\n\n  runSimulation(iterations) {\n    // Implement Monte Carlo simulation logic\n    // Use this.rng.random() instead of Math.random()\n    // Utilize this.data as needed\n    // Return an object with the simulation results\n  }\n\n  // Any additional helper methods as needed\n}\n\nThe runSimulation method should return an object with the following structure:\n{\n  result: {}, // Main results of the simulation\n  additionalStats: {}, // Additional statistics and insights\n  seed: string // The seed used for this simulation run\n}\n\nProblem description:\n{{parseSlackMessage.result.problemDescription}}\n\nData Structure (Optional):\n{{loadDataStructure.result}}\n\nActual Data (Optional):\n{{loadData.result}}\n\nSeed for reproducibility:\n{{generateSeed.result.seed}}\n\nPrevious code critique (If Any):\nPlease address these issues (if any) in your new implementation.\n{{critiqueMonteCarlo.generatedText}}\n\nVERY IMPORTANT: Your response must be a valid JSON object with a single key \"code\" whose value is the complete JavaScript class implementation. \nDo not include ANY text outside of this JSON object. Your entire response should be parseable as JSON.\n\nExample of correct response format:\n{\"code\": \"class State { ... }\"}","maxTokens":4096,"temperature":0.2,"image":""},"description":"This action node generates the Monte Carlo simulation code using AI.","outputs":{"generatedText":"","tokenCount":0,"error":""},"isActive":false,"error":null,"output":null},{"id":"critiqueMonteCarlo","text":"Critique Monte Carlo","x":560,"y":320,"type":"generate-with-ai-llm","icon":"magic","category":"action","isSelected":false,"parameters":{"provider":"Anthropic","model":"claude-3-5-sonnet-20240620","prompt":"Please critique the following Monte Carlo simulation code and its results. Evaluate it based on these criteria:\n1. Accuracy: Assess the accuracy of the simulation based on the problem description and the consistency of results across multiple runs.\n2. Correctness: Does it accurately implement the Monte Carlo method for the given problem?\n3. Efficiency: Is the code optimized for performance?\n4. Readability: Is the code well-structured and easy to understand?\n5. Error handling: Does it properly handle potential errors or edge cases?\n6. Randomness: Is the random number generation implemented correctly and seeded properly?\n7. Result structure: Does it return results in the specified format?\n8. Data Utilization: Does it properly utilize the provided data in the simulation?\n\nProblem description:\n{{parseSlackMessage.result.problemDescription}}\n\nData Structure:\n{{loadDataStructure.result}}\n\nCode to critique:\n{{generateMonteCarloCode.generatedText}}\n\nCode output:\n{{runSimulation.result}}\n\nProvide specific recommendations for improvements, focusing primarily on improving accuracy and reliability if they're not satisfactory. If the code is accurate, reliable, and satisfactory, state that no further improvements are needed.\n\nAlso, provide a numerical assessment of the overall quality of the simulation on a scale of 0 to 1, where 1 is perfect.\n\nYour response must be a valid JSON object with two keys \"critique\" and \"qualityScore\". The \"critique\" value should be your critique and recommendations as a string, and \"qualityScore\" should be a number between 0 and 1.\n\nExample of correct response JSON format:\n{\"critique\": \"Your detailed critique here...\", \"qualityScore\": \"0.85\"}\n\nIMPORTANT:\nDo not include ANY text outside of this JSON object. Your entire response should be parseable as JSON with all newlines and illegal characters escaped.","maxTokens":"4096","temperature":0.2,"image":""},"description":"This action node critiques the generated Monte Carlo code using AI.","outputs":{"generatedText":"","tokenCount":0,"error":""},"isActive":false,"error":null,"output":null},{"id":"countIterations","text":"Count Iterations","x":560,"y":384,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"let count = {{countIterations.result.count}} || 0;\ncount++;\nreturn { count, maxIterations: {{parseSlackMessage.result.maxCodeIterations}} };"},"description":"This utility node keeps track of the number of iterations.","outputs":{"result":null,"error":""},"isActive":false,"error":null,"output":null},{"id":"runSimulation","text":"Run Simulation","x":560,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const stateCodeJson = JSON.parse({{generateMonteCarloCode.generatedText}});\nconst stateCode = stateCodeJson.code;\n\n// Create a function that returns the State class\nconst getStateClass = new Function(\`\n  \${stateCode}\n  return State;\n\`);\n\n// Get the State class\nconst State = getStateClass();\n\nconst state = new State({\n  seed: {{generateSeed.result.seed}},\n  data: {{loadData.result}}\n});\n\nconst iterations = {{parseSlackMessage.result.iterations}};\nreturn state.runSimulation(iterations);"},"description":"This utility node runs the Monte Carlo simulation.","outputs":{"result":null,"error":""},"isActive":false,"error":null,"output":null},{"id":"sendSlackResults","text":"Send Slack Results","x":560,"y":576,"type":"send-slack-message","icon":"slack-send","category":"action","isSelected":false,"parameters":{"channelId":"","message":"Monte Carlo Simulation Results:\nProblem Type: {{parseSlackMessage.result.problemType}}\nProblem Description: {{parseSlackMessage.result.problemDescription}}\nIterations: {{parseSlackMessage.result.iterations}}\nQuality Score: {{critiqueMonteCarlo.generatedText}}\nCode Improvement Iterations: {{countIterations.result.count}}\n\nResults:\n{{runSimulation.result.result}}\n\nAdditional Stats:\n{{runSimulation.result.additionalStats}}\n\nSeed: {{runSimulation.result.seed}}"},"description":"This action node sends the simulation results back to Slack.","outputs":{"success":false,"timestamp":"","error":""},"isActive":false,"error":null,"output":null},{"id":"monteCarloSimulationLabel","text":"Monte Carlo Simulation","x":240,"y":64,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This label node provides a title for the workflow.","outputs":{},"isEditing":false,"isActive":false,"error":null,"output":null},{"id":"85ed0126-337b-4d16-9f05-03c829d4ac6c","text":"Get Score","x":560,"y":512,"isEditing":false,"type":"execute-javascript","icon":"javascript","category":"utility","isSelected":false,"parameters":{"code":"const json = JSON.parse({{critiqueMonteCarlo.generatedText}});\nreturn json.qualityScore;"},"description":"This utility node allows you to execute custom JavaScript code within the workflow, enabling advanced logic and data transformations.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"parseSlackMessage","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"dcdaab84-a8b2-4fd1-ab65-1675a4ad8106","start":{"id":"parseSlackMessage","type":"output"},"end":{"id":"loadDataStructure","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"41779a26-5880-4f52-b18a-1bffb9ecb329","start":{"id":"loadDataStructure","type":"output"},"end":{"id":"loadData","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"a8896d1c-4b2b-4b23-9b9e-ab1f126ac0e7","start":{"id":"loadData","type":"output"},"end":{"id":"generateSeed","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408},{"id":"b850e2ad-0dfd-4a84-a044-24642d7c902d","start":{"id":"generateMonteCarloCode","type":"output"},"end":{"id":"runSimulation","type":"input"},"startX":528,"startY":472,"endX":560,"endY":280},{"id":"c491972c-3e8b-4c12-a756-91a86eca10c7","start":{"id":"runSimulation","type":"output"},"end":{"id":"critiqueMonteCarlo","type":"input"},"startX":848,"startY":280,"endX":560,"endY":344},{"id":"15d302e9-7163-478d-9343-e9a10ee4155a","start":{"id":"85ed0126-337b-4d16-9f05-03c829d4ac6c","type":"output"},"end":{"id":"sendSlackResults","type":"input"},"startX":848,"startY":536,"endX":560,"endY":600,"if":"{{getScore.result}}","condition":"greater_than_or_equal","value":0.8},{"id":"7d2b34f6-c727-4678-9986-79ce1d88bc15","start":{"id":"generateSeed","type":"output"},"end":{"id":"generateMonteCarloCode","type":"input"},"startX":528,"startY":408,"endX":240,"endY":472},{"id":"9a46a449-035d-481b-a6af-fb6612d51c90","start":{"id":"85ed0126-337b-4d16-9f05-03c829d4ac6c","type":"output"},"end":{"id":"generateMonteCarloCode","type":"input"},"startX":848,"startY":536,"endX":240,"endY":472,"if":"{{getScore.result}}","condition":"less_than","value":0.8},{"id":"e3350e6b-09db-475f-9789-ddc701985809","start":{"id":"critiqueMonteCarlo","type":"output"},"end":{"id":"countIterations","type":"input"},"startX":848,"startY":344,"endX":560,"endY":408},{"id":"b950b5fd-c5a6-4689-8ca0-d5800f92aea4","start":{"id":"countIterations","type":"output"},"end":{"id":"85ed0126-337b-4d16-9f05-03c829d4ac6c","type":"input"},"startX":848,"startY":408,"endX":560,"endY":536,"condition":"less_than_or_equal","if":"{{countIterations.result.count}}","value":"{{countIterations.result.maxIterations}}"}],"zoomLevel":1,"canvasOffsetX":288,"canvasOffsetY":110,"isTinyNodeMode":false}

    USER QUERY:
    "Digimon Slack Game"
    RESULT:
    {"id":"e2fe443b-34eb-46e8-8026-292485c8d409","name":"Digimon Slack Game","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":"","response":{}},"description":"This trigger node listens for incoming Slack messages to start or interact with the Digimon game.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"parseCommand","text":"Parse Command","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const message = {{receiveSlackMessage.text}}.toLowerCase().trim();\nconst [command, ...args] = message.split(' ');\n\nreturn {\n command,\n args: args.join(' ')\n};"},"outputs":{"result":null,"error":""},"description":"This node parses the user's command from the Slack message.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"getPlayerData","text":"Get Player Data","x":240,"y":256,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Read","spreadsheetId":"","range":"DigimonPlayers!A:Z","values":""},"outputs":{"success":false,"result":[],"error":""},"description":"This action node fetches the player data from Google Sheets.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"processGameAction","text":"Process Game Action","x":240,"y":320,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"You are the game master for a Digimon-themed text-based game on Slack. Based on the player's command and current game state, generate a response that progresses the game. Include details about the player's Digimon, its stats, and any battle outcomes if applicable.\n\nPlayer: {{receiveSlackMessage.user}}\nCommand: {{parseCommand.result.command}}\nArguments: {{parseCommand.result.args}}\n\nCurrent Player Data:\n{{getPlayerData.result}}\n\nGenerate a response that includes:\n1. The outcome of the player's action\n2. Updated player stats if applicable\n3. A brief description of the current game state\n4. Available actions for the player\n\nReturn your response as a JSON object with the following structure:\n{\n \"response\": \"The game response text\",\n \"updatedStats\": {}, // Updated player stats if any\n \"availableActions\": [] // List of available actions\n}\n\nEnsure the response is engaging, creative, and true to the Digimon theme. Do not include any explanation or additional text outside the JSON object.","maxTokens":"500","temperature":"0.7","image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node generates the game response based on the player's action and current game state.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"updatePlayerData","text":"Update Player Data","x":240,"y":384,"type":"google-sheets-api","icon":"table","category":"action","parameters":{"operation":"Append","spreadsheetId":"","range":"DigimonPlayers!A:Z","values":"{{processGameAction.generatedText.updatedStats}}"},"outputs":{"success":false,"result":[],"error":""},"description":"This action node updates the player data in Google Sheets.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendGameResponse","text":"Send Game Response","x":240,"y":448,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{processGameAction.generatedText.response}}\n\nAvailable actions: {{processGameAction.generatedText.availableActions}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This action node sends the game response back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"digimonGameLabel","text":"Digimon Slack Game","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This label node provides a title for the workflow.","isSelected":false,"isActive":false,"error":null,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"parseCommand","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216},{"id":"edge2","start":{"id":"parseCommand","type":"output"},"end":{"id":"getPlayerData","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280},{"id":"edge3","start":{"id":"getPlayerData","type":"output"},"end":{"id":"processGameAction","type":"input"},"startX":528,"startY":280,"endX":240,"endY":344},{"id":"edge4","start":{"id":"processGameAction","type":"output"},"end":{"id":"updatePlayerData","type":"input"},"startX":528,"startY":344,"endX":240,"endY":408},{"id":"edge5","start":{"id":"updatePlayerData","type":"output"},"end":{"id":"sendGameResponse","type":"input"},"startX":528,"startY":408,"endX":240,"endY":472}],"zoomLevel":1,"canvasOffsetX":285,"canvasOffsetY":146,"isTinyNodeMode":false}

    USER QUERY:
    "CLI Style Slack AI Business Assistant"
    RESULT:
    {"id":"9cac1bf3-082a-4e30-b0bf-17dacb0cb624","name":"AI Slack Business Assistant","nodes":[{"id":"receiveSlackMessage","text":"Receive Slack Message","x":240,"y":128,"type":"receive-slack-message","icon":"slack-receive","category":"trigger","parameters":{"channelId":""},"outputs":{"user":"","text":"","timestamp":"","response":{}},"description":"This trigger node listens for incoming Slack messages to start the CLI-style interaction.","isSelected":false,"isActive":false,"error":null,"output":{"user":"U02AAUCPTSM","type":"message","ts":"1727900059.204379","client_msg_id":"c7e0ab4c-6ec8-428a-8de0-b5ed6bc57b89","text":"report sales-Q1-2023","team":"T02AAU8M6F3","blocks":[{"type":"rich_text","block_id":"NI0Cm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"report sales-Q1-2023"}]}]}],"channel":"","event_ts":"1727900059.204379","channel_type":"group","timestamp":"1727900059.204379","response":{"user":"U02AAUCPTSM","type":"message","ts":"1727900059.204379","client_msg_id":"c7e0ab4c-6ec8-428a-8de0-b5ed6bc57b89","text":"report sales-Q1-2023","team":"T02AAU8M6F3","blocks":[{"type":"rich_text","block_id":"NI0Cm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"report sales-Q1-2023"}]}]}],"channel":"","event_ts":"1727900059.204379","channel_type":"group","timestamp":"1727900059.204379","response":{}},"error":null,"outputs":{"user":"U02AAUCPTSM","type":"message","ts":"1727900059.204379","client_msg_id":"c7e0ab4c-6ec8-428a-8de0-b5ed6bc57b89","text":"report sales-Q1-2023","team":"T02AAU8M6F3","blocks":[{"type":"rich_text","block_id":"NI0Cm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"report sales-Q1-2023"}]}]}],"channel":"","event_ts":"1727900059.204379","channel_type":"group","timestamp":"1727900059.204379","response":{}}}},{"id":"parseCommand","text":"Parse Command","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const message = {{receiveSlackMessage.text}}.trim();\nconst [command, ...args] = message.split(' ');\n\nreturn {\n command: command.toLowerCase(),\n args: args.join(' ')\n};"},"outputs":{"result":null,"error":""},"description":"This node parses the user's command and arguments from the Slack message.","isSelected":false,"isActive":false,"error":null,"output":{"success":true,"result":{"command":"report","args":"sales-Q1-2023"},"error":null,"outputs":{"command":"report","args":"sales-Q1-2023"}}},{"id":"routeCommand","text":"Route Command","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const { command } = {{parseCommand.result}};\n\nconst routes = {\n help: 'showHelp',\n task: 'handleTask',\n report: 'generateReport',\n analyze: 'analyzeData',\n schedule: 'scheduleEvent'\n};\n\nreturn { nextNode: routes[command] || 'handleUnknownCommand' };"},"outputs":{"result":null,"error":""},"description":"This node routes the command to the appropriate handler based on the parsed command.","isSelected":false,"isActive":false,"error":null,"output":{"success":true,"result":{"nextNode":"generateReport"},"error":null,"outputs":{"nextNode":"generateReport"}}},{"id":"showHelp","text":"Show Help","x":560,"y":128,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a helpful response explaining the available commands and their usage for the CLI-Style Slack AI Business Assistant. Include examples for each command. The available commands are:\n\n- help: Show this help message\n- task: Create or manage tasks\n- report: Generate reports\n- analyze: Analyze data\n- schedule: Schedule events\n\nFormat the response in a clear, concise manner suitable for Slack.","maxTokens":300,"temperature":0.7,"image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node generates a help message explaining available commands.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleTask","text":"Handle Task","x":560,"y":192,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Based on the user's input, generate a response for handling a task-related command. The input may include creating, updating, or listing tasks. Provide a suitable response and any necessary follow-up actions.\n\nUser input: {{parseCommand.result.args}}\n\nGenerate a JSON response with the following structure:\n{\n \"response\": \"The response text to send to the user\",\n \"action\": \"create_task | update_task | list_tasks | invalid_command\",\n \"taskDetails\": {} // Include relevant task details if applicable\n}\n\nEnsure the response is helpful and actionable.","maxTokens":500,"temperature":0.7,"image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node handles task-related commands.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"generateReport","text":"Generate Report","x":560,"y":256,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Based on the user's input, generate a response for creating a business report. The input may specify the type of report and any relevant parameters.\n\nUser input: {{parseCommand.result.args}}\n\nGenerate a JSON response with the following structure:\n{\n \"response\": \"The response text to send to the user\",\n \"reportType\": \"sales | financial | performance | custom\",\n \"reportDetails\": {} // Include relevant report details\n}\n\nEnsure the response is professional and informative.","maxTokens":500,"temperature":0.7,"image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node generates business reports based on user input.","isSelected":false,"isActive":false,"error":null,"output":{"generatedText":"{\n  \"response\": \"Thank you for your request to generate a business report. Based on the input 'sales-Q1-2023', I have prepared a sales report for the first quarter of 2023. This report will provide an overview of your company's sales performance during that period.\",\n  \"reportType\": \"sales\",\n  \"reportDetails\": {\n    \"reportPeriod\": \"Q1 2023\",\n    \"metrics\": [\n      \"Total Sales Revenue\",\n      \"Sales Volume (Units Sold)\",\n      \"Average Sales Price\",\n      \"Sales Growth Percentage\",\n      \"Top Selling Products\"\n    ],\n    \"insights\": [\n      \"Sales revenue increased by 15% compared to the same period last year, driven by strong demand for our flagship product line.\",\n      \"Unit sales grew by 12%, indicating a positive market response to our recent product launches.\",\n      \"Average sales price remained stable, suggesting no significant changes in pricing strategy or customer preferences.\",\n      \"The sales growth rate of 15% exceeded our quarterly target of 10%, demonstrating the effectiveness of our sales and marketing initiatives.\"\n    ]\n  }\n}","tokenCount":258,"error":null}},{"id":"analyzeData","text":"Analyze Data","x":560,"y":320,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Based on the user's input, generate a response for analyzing business data. The input may specify the type of analysis and any relevant parameters.\n\nUser input: {{parseCommand.result.args}}\n\nGenerate a JSON response with the following structure:\n{\n \"response\": \"The response text to send to the user\",\n \"analysisType\": \"trend | comparison | forecast | custom\",\n \"analysisDetails\": {} // Include relevant analysis details\n}\n\nEnsure the response is insightful and data-driven.","maxTokens":500,"temperature":0.7,"image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node analyzes business data based on user input.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"scheduleEvent","text":"Schedule Event","x":560,"y":384,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Based on the user's input, generate a response for scheduling a business event. The input may include event details such as title, date, time, and participants.\n\nUser input: {{parseCommand.result.args}}\n\nGenerate a JSON response with the following structure:\n{\n \"response\": \"The response text to send to the user\",\n \"eventDetails\": {\n \"title\": \"\",\n \"date\": \"\",\n \"time\": \"\",\n \"participants\": []\n }\n}\n\nEnsure the response is clear and confirms the event details.","maxTokens":500,"temperature":0.7,"image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node handles scheduling of business events.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleUnknownCommand","text":"Handle Unknown Command","x":560,"y":448,"type":"generate-with-ai-llm","icon":"magic","category":"action","parameters":{"provider":"Anthropic","model":"claude-3-haiku-20240307","prompt":"Generate a helpful response for when the user enters an unknown or invalid command. Provide guidance on available commands and how to use the CLI-Style Slack AI Business Assistant.\n\nUnknown command: {{parseCommand.result.command}}\n\nEnsure the response is friendly and informative, encouraging the user to try valid commands.","maxTokens":200,"temperature":0.7,"image":""},"outputs":{"generatedText":"","tokenCount":0,"error":""},"description":"This node handles unknown or invalid commands.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"parseRoutedCommand","text":"Parse Routed Command","x":880,"y":128,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"// First, resolve the nextNode\nconst nextNode = {{routeCommand.result.nextNode}};\n\n// Then, use the resolved nextNode to get the appropriate response\nlet response = '';\n\nswitch (nextNode) {\n  case 'showHelp':\n    response = {{showHelp.generatedText}};\n    break;\n  case 'handleTask':\n    response = JSON.parse({{handleTask.generatedText}}).response;\n    break;\n  case 'generateReport':\n    response = JSON.parse({{generateReport.generatedText}}).response;\n    break;\n  case 'analyzeData':\n    response = JSON.parse({{analyzeData.generatedText}}).response;\n    break;\n  case 'scheduleEvent':\n    response = JSON.parse({{scheduleEvent.generatedText}}).response;\n    break;\n  default:\n    response = {{handleUnknownCommand.generatedText}};\n}\n\nreturn { response };"},"outputs":{"result":null,"error":""},"description":"This node parses the routed command response before sending it to Slack.","isSelected":false,"isActive":false,"error":"Cannot read properties of null (reading 'response')","output":{"error":"Cannot read properties of null (reading 'response')"}},{"id":"sendSlackResponse","text":"Send Slack Response","x":880,"y":192,"type":"send-slack-message","icon":"slack-send","category":"action","parameters":{"channelId":"","message":"{{parseRoutedCommand.result.response}}"},"outputs":{"success":false,"timestamp":"","error":""},"description":"This node sends the generated response back to the Slack channel.","isSelected":false,"isActive":false,"error":null,"output":{"success":true,"timestamp":"1727900062.815289","error":null}},{"id":"e999ee06-cd98-4f49-83de-b3231c7bf0c3","text":"AI Slack Business Assistant","x":240,"y":64,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"outputs":{},"isActive":false,"output":null}],"edges":[{"id":"edge1","start":{"id":"receiveSlackMessage","type":"output"},"end":{"id":"parseCommand","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216,"isActive":true},{"id":"edge2","start":{"id":"parseCommand","type":"output"},"end":{"id":"routeCommand","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280,"isActive":true},{"id":"edge3","start":{"id":"routeCommand","type":"output"},"end":{"id":"showHelp","type":"input"},"startX":528,"startY":280,"endX":560,"endY":152,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"showHelp","isActive":false},{"id":"edge4","start":{"id":"routeCommand","type":"output"},"end":{"id":"handleTask","type":"input"},"startX":528,"startY":280,"endX":560,"endY":216,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"handleTask","isActive":false},{"id":"edge5","start":{"id":"routeCommand","type":"output"},"end":{"id":"generateReport","type":"input"},"startX":528,"startY":280,"endX":560,"endY":280,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"generateReport","isActive":true},{"id":"edge6","start":{"id":"routeCommand","type":"output"},"end":{"id":"analyzeData","type":"input"},"startX":528,"startY":280,"endX":560,"endY":344,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"analyzeData","isActive":false},{"id":"edge7","start":{"id":"routeCommand","type":"output"},"end":{"id":"scheduleEvent","type":"input"},"startX":528,"startY":280,"endX":560,"endY":408,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"scheduleEvent","isActive":false},{"id":"edge8","start":{"id":"routeCommand","type":"output"},"end":{"id":"handleUnknownCommand","type":"input"},"startX":528,"startY":280,"endX":560,"endY":472,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"handleUnknownCommand","isActive":false},{"id":"edge9","start":{"id":"showHelp","type":"output"},"end":{"id":"parseRoutedCommand","type":"input"},"startX":848,"startY":152,"endX":880,"endY":152,"isActive":false},{"id":"edge10","start":{"id":"handleTask","type":"output"},"end":{"id":"parseRoutedCommand","type":"input"},"startX":848,"startY":216,"endX":880,"endY":152,"isActive":false},{"id":"edge11","start":{"id":"generateReport","type":"output"},"end":{"id":"parseRoutedCommand","type":"input"},"startX":848,"startY":280,"endX":880,"endY":152,"isActive":true},{"id":"edge12","start":{"id":"analyzeData","type":"output"},"end":{"id":"parseRoutedCommand","type":"input"},"startX":848,"startY":344,"endX":880,"endY":152,"isActive":false},{"id":"edge13","start":{"id":"scheduleEvent","type":"output"},"end":{"id":"parseRoutedCommand","type":"input"},"startX":848,"startY":408,"endX":880,"endY":152,"isActive":false},{"id":"edge14","start":{"id":"handleUnknownCommand","type":"output"},"end":{"id":"parseRoutedCommand","type":"input"},"startX":848,"startY":472,"endX":880,"endY":152,"isActive":false},{"id":"edge15","start":{"id":"parseRoutedCommand","type":"output"},"end":{"id":"sendSlackResponse","type":"input"},"startX":1168,"startY":152,"endX":880,"endY":216,"isActive":true}],"zoomLevel":1,"canvasOffsetX":194,"canvasOffsetY":222,"isTinyNodeMode":false}

    USER QUERY:
    "Simple Python Neural Network"
    RESULT:
    {"id":"51f51e1c-a6ba-4fb5-adee-55d5095bbab1","name":"Simple Python Neural Network","nodes":[{"id":"receiveDiscordMessage","text":"Receive Discord Message","x":208,"y":208,"isEditing":false,"type":"receive-discord-message","icon":"discord","category":"trigger","isSelected":false,"parameters":{"channelId":""},"description":"This trigger node listens for incoming Discord messages in a specified channel and triggers the workflow when a new message is received.","error":null,"outputs":{"content":"","author":"","channelId":"","guildId":"","timestamp":0,"response":{}},"isActive":false,"output":null},{"id":"initializeNeuralNetwork","text":"Initialize Neural Network","x":208,"y":272,"isEditing":false,"type":"execute-python","icon":"python","category":"utility","isSelected":false,"parameters":{"code":"import numpy as np\n\nclass SimpleNeuralNetwork:\n\tdef __init__(self, input_size, hidden_size, output_size):\n\t\tself.input_size = input_size\n\t\tself.hidden_size = hidden_size\n\t\tself.output_size = output_size\n\t\t\n\t\tself.W1 = np.random.randn(self.input_size, self.hidden_size)\n\t\tself.b1 = np.zeros((1, self.hidden_size))\n\t\tself.W2 = np.random.randn(self.hidden_size, self.output_size)\n\t\tself.b2 = np.zeros((1, self.output_size))\n\t\n\tdef sigmoid(self, x):\n\t\treturn 1 / (1 + np.exp(-x))\n\t\n\tdef sigmoid_derivative(self, x):\n\t\treturn x * (1 - x)\n\nnn = SimpleNeuralNetwork(input_size=2, hidden_size=4, output_size=1)\n\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([[0], [1], [1], [0]])\n\nresult = {\n\t'W1': nn.W1.tolist(),\n\t'b1': nn.b1.tolist(),\n\t'W2': nn.W2.tolist(),\n\t'b2': nn.b2.tolist(),\n\t'X': X.tolist(),\n\t'y': y.tolist()\n}\n"},"description":"Initialize the neural network and prepare the dataset.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null},{"id":"forwardPass","text":"Forward Pass","x":208,"y":336,"isEditing":false,"type":"execute-python","icon":"python","category":"utility","isSelected":false,"parameters":{"code":"import numpy as np\n\nclass SimpleNeuralNetwork:\n\tdef __init__(self, W1, b1, W2, b2):\n\t\tself.W1 = np.array(W1)\n\t\tself.b1 = np.array(b1)\n\t\tself.W2 = np.array(W2)\n\t\tself.b2 = np.array(b2)\n\t\n\tdef sigmoid(self, x):\n\t\treturn 1 / (1 + np.exp(-x))\n\ndef forward(nn, X):\n\tnn.z1 = np.dot(X, nn.W1) + nn.b1\n\tnn.a1 = nn.sigmoid(nn.z1)\n\tnn.z2 = np.dot(nn.a1, nn.W2) + nn.b2\n\tnn.a2 = nn.sigmoid(nn.z2)\n\treturn nn.a2\n\nnn_data = {{initializeNeuralNetwork.result}}\nnn = SimpleNeuralNetwork(nn_data['W1'], nn_data['b1'], nn_data['W2'], nn_data['b2'])\nX = np.array(nn_data['X'])\n\noutput = forward(nn, X)\n\nresult = {\n\t'W1': nn.W1.tolist(),\n\t'b1': nn.b1.tolist(),\n\t'W2': nn.W2.tolist(),\n\t'b2': nn.b2.tolist(),\n\t'a1': nn.a1.tolist(),\n\t'output': output.tolist()\n}\n"},"description":"Perform the forward pass of the neural network.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null},{"id":"backwardPass","text":"Backward Pass","x":208,"y":400,"isEditing":false,"type":"execute-python","icon":"python","category":"utility","isSelected":false,"parameters":{"code":"import numpy as np\n\nclass SimpleNeuralNetwork:\n\tdef __init__(self, W1, b1, W2, b2, a1):\n\t\tself.W1 = np.array(W1, dtype=np.float64)\n\t\tself.b1 = np.array(b1, dtype=np.float64)\n\t\tself.W2 = np.array(W2, dtype=np.float64)\n\t\tself.b2 = np.array(b2, dtype=np.float64)\n\t\tself.a1 = np.array(a1, dtype=np.float64)\n\t\n\tdef sigmoid(self, x):\n\t\treturn 1 / (1 + np.exp(-x))\n\t\n\tdef sigmoid_derivative(self, x):\n\t\treturn x * (1 - x)\n\ndef backward(nn, X, y, output):\n\terror = y - output\n\td_output = error * nn.sigmoid_derivative(output)\n\t\n\terror_hidden = np.dot(d_output, nn.W2.T)\n\td_hidden = error_hidden * nn.sigmoid_derivative(nn.a1)\n\t\n\tnn.W2 += np.dot(nn.a1.T, d_output)\n\tnn.b2 += np.sum(d_output, axis=0, keepdims=True)\n\tnn.W1 += np.dot(X.T, d_hidden)\n\tnn.b1 += np.sum(d_hidden, axis=0, keepdims=True)\n\nnn_data = {{forwardPass.result}}\nnn = SimpleNeuralNetwork(nn_data['W1'], nn_data['b1'], nn_data['W2'], nn_data['b2'], nn_data['a1'])\nX = np.array({{initializeNeuralNetwork.result.X}}, dtype=np.float64)\ny = np.array({{initializeNeuralNetwork.result.y}}, dtype=np.float64)\noutput = np.array(nn_data['output'], dtype=np.float64)\n\nbackward(nn, X, y, output)\n\nresult = {\n\t'W1': nn.W1.tolist(),\n\t'b1': nn.b1.tolist(),\n\t'W2': nn.W2.tolist(),\n\t'b2': nn.b2.tolist(),\n\t'a1': nn.a1.tolist()\n}\n"},"description":"Perform the backward pass of the neural network.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null},{"id":"trainNeuralNetwork","text":"Train Neural Network","x":208,"y":464,"isEditing":false,"type":"execute-python","icon":"python","category":"utility","isSelected":false,"parameters":{"code":"import numpy as np\n\nclass SimpleNeuralNetwork:\n\tdef __init__(self, W1, b1, W2, b2):\n\t\tself.W1 = np.array(W1)\n\t\tself.b1 = np.array(b1)\n\t\tself.W2 = np.array(W2)\n\t\tself.b2 = np.array(b2)\n\t\n\tdef sigmoid(self, x):\n\t\treturn 1 / (1 + np.exp(-x))\n\t\n\tdef sigmoid_derivative(self, x):\n\t\treturn x * (1 - x)\n\t\n\tdef forward(self, X):\n\t\tself.z1 = np.dot(X, self.W1) + self.b1\n\t\tself.a1 = self.sigmoid(self.z1)\n\t\tself.z2 = np.dot(self.a1, self.W2) + self.b2\n\t\tself.a2 = self.sigmoid(self.z2)\n\t\treturn self.a2\n\t\n\tdef backward(self, X, y, output):\n\t\terror = y - output\n\t\td_output = error * self.sigmoid_derivative(output)\n\t\t\n\t\terror_hidden = np.dot(d_output, self.W2.T)\n\t\td_hidden = error_hidden * self.sigmoid_derivative(self.a1)\n\t\t\n\t\tself.W2 += np.dot(self.a1.T, d_output)\n\t\tself.b2 += np.sum(d_output, axis=0, keepdims=True)\n\t\tself.W1 += np.dot(X.T, d_hidden)\n\t\tself.b1 += np.sum(d_hidden, axis=0, keepdims=True)\n\ndef train(nn, X, y, epochs):\n\tfor _ in range(epochs):\n\t\toutput = nn.forward(X)\n\t\tnn.backward(X, y, output)\n\nnn_data = {{backwardPass.result}}\nnn = SimpleNeuralNetwork(nn_data['W1'], nn_data['b1'], nn_data['W2'], nn_data['b2'])\nX = np.array({{initializeNeuralNetwork.result.X}})\ny = np.array({{initializeNeuralNetwork.result.y}})\n\ntrain(nn, X, y, epochs=10000)\n\nresult = {\n\t'W1': nn.W1.tolist(),\n\t'b1': nn.b1.tolist(),\n\t'W2': nn.W2.tolist(),\n\t'b2': nn.b2.tolist()\n}\n"},"description":"Train the neural network.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null},{"id":"makePredictions","text":"Make Predictions","x":208,"y":528,"isEditing":false,"type":"execute-python","icon":"python","category":"utility","isSelected":false,"parameters":{"code":"import numpy as np\n\nclass SimpleNeuralNetwork:\n\tdef __init__(self, W1, b1, W2, b2):\n\t\tself.W1 = np.array(W1)\n\t\tself.b1 = np.array(b1)\n\t\tself.W2 = np.array(W2)\n\t\tself.b2 = np.array(b2)\n\t\n\tdef sigmoid(self, x):\n\t\treturn 1 / (1 + np.exp(-x))\n\t\n\tdef forward(self, X):\n\t\tself.z1 = np.dot(X, self.W1) + self.b1\n\t\tself.a1 = self.sigmoid(self.z1)\n\t\tself.z2 = np.dot(self.a1, self.W2) + self.b2\n\t\tself.a2 = self.sigmoid(self.z2)\n\t\treturn self.a2\n\nnn_data = {{trainNeuralNetwork.result}}\nnn = SimpleNeuralNetwork(nn_data['W1'], nn_data['b1'], nn_data['W2'], nn_data['b2'])\nX = np.array({{initializeNeuralNetwork.result.X}})\ny = np.array({{initializeNeuralNetwork.result.y}})\n\nresult = []\nfor i in range(len(X)):\n\tprediction = nn.forward(X[i].reshape(1, -1))\n\tresult.append({\n\t\t\"input\": X[i].tolist(),\n\t\t\"target\": int(y[i][0]),\n\t\t\"prediction\": float(prediction[0][0])\n\t})\n\noutput = \"Final results:\\n\"\nfor r in result:\n\toutput += f\"Input: {r['input']}, Target: {r['target']}, Prediction: {r['prediction']:.4f}\\n\"\n\nresult = {\n\t'output': output\n}\n"},"description":"Make predictions using the trained neural network.","error":null,"outputs":{"result":null,"error":""},"isActive":false,"output":null},{"id":"sendDiscordMessage","text":"Send Discord Message","x":208,"y":592,"isEditing":false,"type":"send-discord-message","icon":"discord","category":"action","isSelected":false,"parameters":{"channelId":"","message":"{{makePredictions.result.output}}"},"description":"This action node sends a message to a specified Discord channel.","error":null,"outputs":{"success":false,"messageId":"","timestamp":0,"error":""},"isActive":false,"output":null},{"id":"7ebe0ea2-4e4d-44ba-856c-c8773b1ca8d0","text":"Python Neural Network","x":208,"y":144,"isEditing":false,"type":"label","icon":"text","category":"utility","isSelected":false,"parameters":{},"description":"This utility node displays a text label in the workflow, providing additional context or information.","error":null,"outputs":{},"isActive":false,"output":null}],"edges":[{"id":"edge-1","start":{"id":"receiveDiscordMessage","type":"output"},"end":{"id":"initializeNeuralNetwork","type":"input"},"startX":496,"startY":232,"endX":208,"endY":296},{"id":"edge-2","start":{"id":"initializeNeuralNetwork","type":"output"},"end":{"id":"forwardPass","type":"input"},"startX":496,"startY":296,"endX":208,"endY":360},{"id":"edge-3","start":{"id":"forwardPass","type":"output"},"end":{"id":"backwardPass","type":"input"},"startX":496,"startY":360,"endX":208,"endY":424},{"id":"edge-4","start":{"id":"backwardPass","type":"output"},"end":{"id":"trainNeuralNetwork","type":"input"},"startX":496,"startY":424,"endX":208,"endY":488},{"id":"edge-5","start":{"id":"trainNeuralNetwork","type":"output"},"end":{"id":"makePredictions","type":"input"},"startX":496,"startY":488,"endX":208,"endY":552},{"id":"edge-6","start":{"id":"makePredictions","type":"output"},"end":{"id":"sendDiscordMessage","type":"input"},"startX":496,"startY":552,"endX":208,"endY":616}],"zoomLevel":1,"canvasOffsetX":568,"canvasOffsetY":84,"isTinyNodeMode":false}

    USER QUERY:
    "CLI Style Discord Database Bot"
    RESULT:
    {"id":"eb61802c-373f-4a4d-9c62-1e7900f39d4b","name":"CLI Style Discord Database Bot","nodes":[{"id":"receiveDiscordMessage","text":"Receive Discord Message","x":240,"y":128,"type":"receive-discord-message","icon":"discord","category":"trigger","parameters":{"channelId":""},"outputs":{"content":"","author":"","channelId":"","guildId":"","timestamp":0,"response":{}},"description":"This trigger node listens for incoming Discord messages in a specified channel and triggers the workflow when a new message is received.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"parseCommand","text":"Parse Command","x":240,"y":192,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const message = {{receiveDiscordMessage.content}}.toLowerCase().trim();\nconst [command, ...args] = message.split(' ');\n\nreturn {\n command,\n args: args\n};"},"outputs":{"result":null,"error":""},"description":"This node parses the user's command from the Discord message.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"routeCommand","text":"Route Command","x":240,"y":256,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const { command } = {{parseCommand.result}};\n\nconst routes = {\n help: 'showHelp',\n add: 'addItem',\n list: 'listItems',\n delete: 'deleteItem',\n update: 'updateItem'\n};\n\nreturn { nextNode: routes[command] || 'handleUnknownCommand' };"},"outputs":{"result":null,"error":""},"description":"This node routes the command to the appropriate handler based on the parsed command.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"showHelp","text":"Show Help","x":560,"y":128,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const helpMessage = \`Available commands:\n!help - Show this help message\n!add <item> - Add an item to the database\n!list - List all items in the database\n!delete <id> - Delete an item from the database\n!update <id> <new_item> - Update an item in the database\`;\n\nreturn { message: helpMessage };"},"outputs":{"result":null,"error":""},"description":"This node generates a help message explaining available commands.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"addItem","text":"Add Item","x":560,"y":192,"type":"database-operation","icon":"database","category":"utility","parameters":{"operation":"INSERT","tableName":"items","columns":"item","condition":"","values":"{{parseCommand.result.args[0]}}"},"outputs":{"success":false,"result":[],"affectedRows":0,"error":""},"description":"This node adds a new item to the database.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"listItems","text":"List Items","x":560,"y":256,"type":"database-operation","icon":"database","category":"utility","parameters":{"operation":"SELECT","tableName":"items","columns":"*","condition":"","values":""},"outputs":{"success":false,"result":[],"affectedRows":0,"error":""},"description":"This node retrieves all items from the database.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"deleteItem","text":"Delete Item","x":560,"y":320,"type":"database-operation","icon":"database","category":"utility","parameters":{"operation":"DELETE","tableName":"items","columns":"","condition":"id = ?","values":"{{parseCommand.result.args[0]}}"},"outputs":{"success":false,"result":[],"affectedRows":0,"error":""},"description":"This node deletes an item from the database.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"updateItem","text":"Update Item","x":560,"y":384,"type":"database-operation","icon":"database","category":"utility","parameters":{"operation":"UPDATE","tableName":"items","columns":"item","condition":"id = {{parseCommand.result.args[0]}}","values":"{{parseCommand.result.args[1]}}"},"outputs":{"success":false,"result":[],"affectedRows":0,"error":""},"description":"This node updates an item in the database.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"handleUnknownCommand","text":"Handle Unknown Command","x":560,"y":448,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const unknownCommandMessage = 'Unknown command. Type !help for a list of available commands.';\n\nreturn { message: unknownCommandMessage };"},"outputs":{"result":null,"error":""},"description":"This node handles unknown or invalid commands.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"formatResponse","text":"Format Response","x":880,"y":128,"type":"execute-javascript","icon":"javascript","category":"utility","parameters":{"code":"const nextNode = {{routeCommand.result.nextNode}};\nlet response = '';\n\nconst getResponseMessage = (message) => {\n  return message || 'An unexpected error occurred.';\n};\n\n// Function to format JSON data\nconst formatJsonData = (data) => {\n  return data.map(item => \`\n    ID: \${item.id}\n    User ID: \${item.user_id}\n    Table Name: \${item.table_name}\n    Item: \${item.data.item}\n    Created At: \${item.created_at}\n    Updated At: \${item.updated_at}\n  \`).join('\\n');\n};\n\n// Handle responses based on nextNode\nswitch (nextNode) {\n  case 'showHelp':\n    response = getResponseMessage({{showHelp.result.message}});\n    break;\n  case 'addItem':\n    response = {{addItem.success}} ? 'Item added successfully.' : 'Failed to add item.';\n    break;\n  case 'listItems':\n    // Check if the response is a string and parse if necessary\n    const itemsResult = {{listItems.result}};\n    const itemsData = typeof itemsResult === 'string' ? JSON.parse(itemsResult) : itemsResult;\n\n    response = formatJsonData(itemsData);\n    break;\n  case 'deleteItem':\n    response = {{deleteItem.affectedRows}} > 0 \n      ? 'Item deleted successfully.' \n      : 'Failed to delete item or item not found.';\n    break;\n  case 'updateItem':\n    response = {{updateItem.affectedRows}} > 0 \n      ? 'Item updated successfully.' \n      : 'Failed to update item or item not found.';\n    break;\n  default:\n    response = getResponseMessage({{handleUnknownCommand.result.message}});\n}\n\nreturn { response };"},"outputs":{"result":null,"error":""},"description":"This node formats the response based on the command result.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"sendDiscordResponse","text":"Send Discord Response","x":880,"y":192,"type":"send-discord-message","icon":"discord","category":"action","parameters":{"channelId":"{{receiveDiscordMessage.channelId}}","message":"{{formatResponse.result.response}}"},"outputs":{"success":false,"messageId":"","timestamp":0,"error":""},"description":"This node sends the formatted response back to the Discord channel.","isSelected":false,"isActive":false,"error":null,"output":null},{"id":"cliStyleDiscordDatabaseBotLabel","text":"CLI Style Discord Database Bot","x":240,"y":64,"type":"label","icon":"text","category":"utility","parameters":{},"outputs":{},"description":"This label node provides a title for the workflow.","isSelected":false,"isActive":false,"error":null,"output":null,"isEditing":false}],"edges":[{"id":"edge1","start":{"id":"receiveDiscordMessage","type":"output"},"end":{"id":"parseCommand","type":"input"},"startX":528,"startY":152,"endX":240,"endY":216,"isActive":false},{"id":"edge2","start":{"id":"parseCommand","type":"output"},"end":{"id":"routeCommand","type":"input"},"startX":528,"startY":216,"endX":240,"endY":280,"isActive":false},{"id":"edge3","start":{"id":"routeCommand","type":"output"},"end":{"id":"showHelp","type":"input"},"startX":528,"startY":280,"endX":560,"endY":152,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"showHelp","isActive":false},{"id":"edge4","start":{"id":"routeCommand","type":"output"},"end":{"id":"addItem","type":"input"},"startX":528,"startY":280,"endX":560,"endY":216,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"addItem","isActive":false},{"id":"edge5","start":{"id":"routeCommand","type":"output"},"end":{"id":"listItems","type":"input"},"startX":528,"startY":280,"endX":560,"endY":280,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"listItems","isActive":false},{"id":"edge6","start":{"id":"routeCommand","type":"output"},"end":{"id":"deleteItem","type":"input"},"startX":528,"startY":280,"endX":560,"endY":344,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"deleteItem","isActive":false},{"id":"edge7","start":{"id":"routeCommand","type":"output"},"end":{"id":"updateItem","type":"input"},"startX":528,"startY":280,"endX":560,"endY":408,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"updateItem","isActive":false},{"id":"edge8","start":{"id":"routeCommand","type":"output"},"end":{"id":"handleUnknownCommand","type":"input"},"startX":528,"startY":280,"endX":560,"endY":472,"condition":"equals","if":"{{routeCommand.result.nextNode}}","value":"handleUnknownCommand","isActive":false},{"id":"edge9","start":{"id":"showHelp","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":848,"startY":152,"endX":880,"endY":152,"isActive":false},{"id":"edge10","start":{"id":"addItem","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":848,"startY":216,"endX":880,"endY":152,"isActive":false},{"id":"edge11","start":{"id":"listItems","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":848,"startY":280,"endX":880,"endY":152,"isActive":false},{"id":"edge12","start":{"id":"deleteItem","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":848,"startY":344,"endX":880,"endY":152,"isActive":false},{"id":"edge13","start":{"id":"updateItem","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":848,"startY":408,"endX":880,"endY":152,"isActive":false},{"id":"edge14","start":{"id":"handleUnknownCommand","type":"output"},"end":{"id":"formatResponse","type":"input"},"startX":848,"startY":472,"endX":880,"endY":152,"isActive":false},{"id":"edge15","start":{"id":"formatResponse","type":"output"},"end":{"id":"sendDiscordResponse","type":"input"},"startX":1168,"startY":152,"endX":880,"endY":216,"isActive":false}],"zoomLevel":1,"canvasOffsetX":274,"canvasOffsetY":169,"isTinyNodeMode":false}

    [END EXAMPLES]

    [IMPORTANT TOOL DETAILS]: 
    1. You have access to ONLY the [AVAILABLE TOOLS] listed below.
    2. Ignore any tools in the examples above as you may not have access to those.
    3. Do NOT make up or create any ficticious tools, only use the list below. 
    4. If the system absolutely needs a tool that you don't have, think creatively:
    5. Think base systems level foundational thinking and build off of the base tools provided.
    6. Use "execute-javascript" to run number calculations, run code, generate data, etc.
    7. Use "generate-with-ai-llm" for any detail extraction, categorization, reasoning, or most things a human would need to do.
    8. Use the native API (e.g. "facebook-api", "twitter-api", "github-api") tool for third party tools if available below.
    9. If native API is not available for a third party tool, use "incoming-webhook" and "outgoing-webhook" instead.
    10. Always prioritize using a native API tool if it is available over using just a generic webhook.
    11. Use emails to receive data and send notifications.
    12. All workflows must start with a trigger type node from the tool library, and ONLY ONE trigger type node per workflow.

    [IMPORTANT JSON AND CODE FORMATTING INSTRUCTIONS]:
    1. Use double quotes for all string values, including keys.
    2. ALWAYS format text and code well formatted with slash n (\\n) newlines as expected in ALL FIELDS.
    3. BUT DO NOT use "'\\n' +" to split lines. "+" CONCATENATION WILL BREAK THE SYSTEM!!!!
    4. Ensure that all object keys are properly quoted.
    5. ALWAYS use JSON.parse on double quote {{}} properties if they are a JSON type object.
    6. Double quote parameter {{}} references must match the node ID EXACTLY or they will not run. (e.g. {{analyzeAndScoreLead.generatedText}} for the node "Analyze and Score Lead")
    7. JavaScript can ONLY be used in "execute-javascript" nodes ONLY in the "Code" field. NO other fields or node types accept code. If you need to parse data, use the execute-javascript node.
    8. Return ONLY the final JSON ready to run with ABSOLUTELY NO explanation or additional text.
    9. The system WILL break if anything other than JSON is returned.
    10. Double-check that the JSON is valid and ready to run before returning it.
    11. DO NOT USE JSON.parse OR ANY JAVASCRIPT LOGIC in ANY other field types other than CODE- IT WILL BREAK THE SYSTEM!!!!! JSON.parsing and other logic functionality is ONLY available within the execute-javascript node.
    12. If you need to access child elements you can just use {{nodeAction.response.childElementAsNeeded}}
    13. When generating Python code for execute-python nodes, please use '\\n' for newlines and '\\t' for each level of indentation. Ensure that the indentation structure is correctly preserved, as it is crucial for Python code execution.`;

    try {
      const msg = await this.clients.anthropic.messages.create(
        {
          model: "claude-3-5-sonnet-20240620",
          max_tokens: 8192,
          temperature: 0,
          system: [
            {
              type: "text",
              text: workflowGenSystemPrompt,
              // IF CACHING
              // cache_control: { type: "ephemeral" },
            },
          ],
          messages: [
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: workflowOverview,
                },
              ],
            },
          ],
        },
        {
          // IF CACHING
          // headers: {
          //   "anthropic-beta":
          //     "prompt-caching-2024-07-31,max-tokens-3-5-sonnet-2024-07-15",
          // },
          headers: {
            "anthropic-beta":
              "max-tokens-3-5-sonnet-2024-07-15",
          },
        }
      );

      console.log(msg);

      return { workflow: msg.content[0].text };
    } catch (error) {
      console.error("Error generating workflow:", error);
      throw error;
    }
  }
  _removeMarkdownJson(text) {
    // Remove "```json" from the beginning if present
    text = text.replace(/^\s*```json\s*/i, "");

    // Remove "```" from the end if present
    text = text.replace(/\s*```\s*$/i, "");

    return text.trim();
  }
}

export default StreamEngine;
